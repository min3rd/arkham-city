var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.536,1,2.504]],["body/modules/AppModule.html",[0,2.351,1,4.862,2,1.807,3,1.807,4,2.077,5,2.077,6,1.807,7,2.849,8,2.077,9,3.041,10,3.041,11,4.093,12,0.021,13,4.093,14,4.093,15,3.523,16,2.849,17,2.077,18,1.933,19,0.232,20,0.208,21,0.208,22,3.556,23,3.08,24,0.968,25,0.781,26,3.556,27,2.448,28,1.807,29,3.041,30,1.418,31,3.556,32,3.556,33,3.556,34,2.448,35,3.556,36,0.958,37,4.876,38,1.502,39,3.556,40,1.933,41,1.502,42,0.232,43,0.115,44,0.014,45,0.014]],["title/classes/AuditEntity.html",[43,0.118,46,2.124]],["body/classes/AuditEntity.html",[12,0.02,19,0.259,20,0.232,21,0.232,24,0.578,30,1.582,36,1.231,42,0.343,43,0.128,44,0.015,45,0.015,46,3.066,47,1.582,48,3.013,49,0.316,50,1.357,51,5.031,52,5.031,53,5.031,54,5.031,55,0.594,56,4.113,57,2.806,58,4.097,59,1.302,60,3.966,61,3.966,62,3.966,63,3.966,64,2.853,65,0.92,66,2.505,67,2.731,68,2.156,69,1.89,70,2.156,71,1.778]],["title/controllers/AuthController.html",[72,1.371,73,2.504]],["body/controllers/AuthController.html",[12,0.021,19,0.194,20,0.174,21,0.174,24,0.855,25,0.653,41,1.255,42,0.194,43,0.096,44,0.012,45,0.012,49,0.237,55,0.525,57,2.262,59,1.15,72,1.12,73,2.957,74,2.54,75,1.735,76,2.54,77,2.335,78,1.303,79,2.438,80,2.438,81,4.296,82,2.509,83,2.54,84,4.296,85,2.336,86,2.336,87,2.97,88,1.508,89,1.087,90,0.913,91,3.324,92,1.677,93,2.54,94,3.673,95,3.264,96,2.97,97,2.97,98,2.478,99,2.97,100,2.97,101,1.735,102,1.814,103,2.045,104,3.187,105,2.54,106,1.615,107,1.509,108,2.54,109,2.54,110,2.54,111,2.54,112,2.948,113,2.97,114,3.23,115,2.54,116,2.97,117,1.876,118,1.415,119,2.045,120,2.97,121,2.97,122,1.902,123,2.97,124,3.673,125,3.673,126,2.54,127,2.54,128,4.296,129,2.97,130,2.97,131,2.97,132,2.97]],["title/guards/AuthGuard.html",[133,2.763,134,2.504]],["body/guards/AuthGuard.html",[12,0.021,19,0.156,20,0.139,21,0.139,24,0.855,25,0.523,28,1.209,36,0.716,42,0.156,43,0.077,44,0.01,45,0.01,49,0.19,55,0.507,59,0.92,78,1.105,88,1.206,89,0.87,90,0.73,91,2.405,92,1.105,95,3.766,115,2.035,122,1.668,134,2.507,135,2.379,136,2.035,137,2.794,138,4.957,139,3.559,140,3.642,141,1.632,142,2.379,143,4.281,144,4.455,145,5.864,146,2.379,147,3.642,148,3.766,149,2.379,150,1.808,151,2.767,152,3.642,153,5.864,154,2.379,155,2.108,156,1.047,157,4.424,158,1.638,159,1.503,160,2.035,161,1.808,162,1.632,163,2.379,164,1.293,165,2.257,166,3.114,167,2.379,168,2.379,169,2.379,170,2.379,171,2.379,172,2.127,173,2.221,174,2.221,175,2.221,176,2.221,177,2.257,178,2.394,179,2.394,180,2.405,181,2.379,182,1.808,183,2.379,184,2.767,185,1.632,186,2.035,187,1.503,188,2.379,189,1.808,190,2.379,191,2.379,192,2.379,193,1.638,194,1.808,195,2.507,196,2.379,197,2.379,198,1.638,199,2.379,200,1.808,201,2.379,202,2.379]],["title/injectables/AuthService.html",[112,2.124,156,1.046]],["body/injectables/AuthService.html",[12,0.021,19,0.126,20,0.112,21,0.112,24,0.845,25,0.422,36,1.305,38,0.811,42,0.126,43,0.062,44,0.009,45,0.009,49,0.153,55,0.458,59,1.07,69,1.836,77,1.673,78,0.934,79,1.536,80,1.227,82,1.798,85,2.513,86,2.513,88,1.404,89,1.012,90,0.85,91,1.044,92,1.463,101,1.122,102,2.175,103,1.322,106,2.396,107,0.976,112,1.798,114,1.798,118,1.467,119,1.322,122,1.661,137,3.909,139,1.944,141,1.38,143,4.109,151,3.912,155,2.299,156,0.885,159,1.213,162,1.38,165,2.175,173,0.861,174,0.861,175,0.861,176,0.861,177,0.811,178,0.861,179,0.861,180,1.044,187,3.252,203,0.915,204,1.642,205,2.575,206,3.853,207,2.653,208,1.92,209,3.769,210,1.92,211,2.632,212,1.92,213,2.94,214,4.408,215,1.92,216,0.915,217,1.044,218,1.958,219,1.92,220,1.92,221,3.078,222,1.92,223,2.454,224,1.213,225,1.642,226,2.299,227,2.299,228,1.92,229,1.642,230,1.642,231,1.044,232,0.976,233,1.122,234,1.459,235,1.642,236,3.769,237,1.213,238,1.642,239,1.467,240,0.915,241,1.92,242,1.92,243,2.632,244,1.92,245,3.295,246,1.467,247,1.92,248,1.92,249,1.92,250,3.078,251,1.92,252,0.976,253,3.078,254,1.92,255,2.094,256,1.92,257,2.632,258,1.92,259,1.642]],["title/classes/BadMicroserviceResponse.html",[43,0.118,260,1.977]],["body/classes/BadMicroserviceResponse.html",[12,0.021,19,0.216,20,0.193,21,0.193,42,0.379,43,0.15,44,0.013,45,0.013,47,1.317,49,0.263,50,1.197,55,0.55,59,1.206,65,0.766,68,3.321,69,2.764,70,3.608,71,2.839,88,0.9,89,0.649,90,0.883,102,2.45,141,2.076,155,2.208,164,2.909,172,2.706,216,2.208,217,1.795,218,1.678,260,2.518,261,2.085,262,2.824,263,3.608,264,4.632,265,4.641,266,3.302,267,3.302,268,3.519,269,2.273,270,1.795,271,2.509,272,2.509,273,2.509,274,2.273,275,2.273,276,2.273,277,2.273,278,2.273,279,2.273,280,2.273,281,2.273,282,2.273,283,2.273,284,2.273]],["title/classes/BadRequestAlertException.html",[43,0.118,285,2.297]],["body/classes/BadRequestAlertException.html",[12,0.021,19,0.25,20,0.224,21,0.224,24,0.842,25,0.84,36,1.213,42,0.25,43,0.124,44,0.014,45,0.014,47,1.525,49,0.305,50,1.324,55,0.486,59,1.201,70,3.6,77,2.785,78,1.554,88,1.043,89,0.752,90,0.631,92,1.16,122,1.441,141,1.714,155,1.822,193,3.527,262,4.381,263,3.6,269,3.527,285,3.235,286,3.27,287,4.94,288,6.171,289,5.123,290,3.824,291,3.27,292,3.27,293,2.905,294,3.824,295,3.824,296,3.824,297,3.27,298,3.824,299,5.123,300,3.824]],["title/classes/BaseService.html",[43,0.118,205,2.124]],["body/classes/BaseService.html",[12,0.021,19,0.293,20,0.262,21,0.262,24,0.829,42,0.293,43,0.145,44,0.016,45,0.016,47,1.788,49,0.358,55,0.425,59,0.932,78,1.724,82,3.32,88,1.223,89,0.881,90,0.74,92,1.36,101,3.32,102,2.771,106,2.438,107,2.278,114,3.645,184,3.407,185,2.01,205,3.32,285,2.832,301,3.835,302,4.484,303,4.484,304,4.484,305,3.835,306,3.835]],["title/modules/CoreModule.html",[0,1.536,11,2.297]],["body/modules/CoreModule.html",[0,2.615,2,2.241,3,2.241,4,2.576,5,2.576,6,2.241,7,3.617,8,2.576,11,4.349,12,0.02,16,3.285,17,2.576,18,2.397,19,0.288,20,0.258,21,0.258,23,2.785,24,0.903,25,0.969,41,1.863,42,0.288,43,0.143,44,0.016,45,0.016,205,3.285,307,3.771,308,3.771,309,3.744,310,4.41,311,4.41,312,4.41]],["title/interfaces/CreateFirestoreRecord.html",[65,0.844,313,2.297]],["body/interfaces/CreateFirestoreRecord.html",[12,0.02,19,0.32,20,0.286,21,0.286,36,1.276,42,0.32,44,0.017,45,0.017,49,0.39,50,1.552,55,0.57,65,1.136,71,3.034,90,1.117,313,3.792,314,2.195,315,4.188,316,5.143]],["title/classes/DynamicSchema.html",[43,0.118,317,1.977]],["body/classes/DynamicSchema.html",[12,0.021,19,0.251,20,0.224,21,0.224,24,0.749,30,1.53,36,1.266,42,0.404,43,0.166,44,0.014,45,0.014,47,1.53,49,0.306,50,1.327,55,0.611,57,2.301,58,4.019,59,1.068,64,3.146,69,1.829,89,1.215,90,0.847,155,1.829,165,1.621,216,1.829,218,2.609,317,2.791,318,2.424,319,4.397,320,3.655,321,3.838,322,3.838,323,3.838,324,2.642,325,2.609,326,3.243,327,3.282,328,3.282,329,3.282,330,2.642,331,2.424,332,2.916]],["title/injectables/ExceptionInterceptor.html",[156,1.046,333,2.763]],["body/injectables/ExceptionInterceptor.html",[12,0.021,19,0.254,20,0.227,21,0.227,24,0.754,25,0.852,42,0.254,43,0.126,44,0.014,45,0.014,49,0.309,55,0.368,56,2.45,59,0.807,78,1.569,88,1.058,89,0.763,90,0.64,92,1.177,122,2.193,148,4.715,150,2.947,156,1.487,164,2.109,173,2.318,174,2.318,175,2.898,176,2.318,177,2.185,178,2.318,179,2.318,185,1.739,195,2.671,198,2.671,203,1.849,237,2.45,333,3.93,334,3.318,335,4.423,336,4.423,337,5.308,338,3.88,339,4.976,340,4.423,341,3.88,342,3.318,343,3.88,344,3.88,345,3.88]],["title/classes/Field.html",[43,0.118,320,2.297]],["body/classes/Field.html",[12,0.021,19,0.229,20,0.205,21,0.205,24,0.704,30,1.399,36,1.3,42,0.389,43,0.156,44,0.014,45,0.014,47,1.399,49,0.28,50,1.249,55,0.649,57,2.669,58,4.042,59,1.238,64,3.004,69,2.303,89,1.171,90,0.983,165,1.482,216,2.303,217,1.907,218,3.026,317,1.907,318,2.216,319,2.666,320,3.49,324,2.416,325,2.455,326,3.052,327,4.726,328,4.726,329,3,330,2.416,331,2.216,332,2.666,346,3.509,347,3.509,348,3.509,349,3.509,350,3.509]],["title/controllers/FirestoreController.html",[72,1.371,351,1.977]],["body/controllers/FirestoreController.html",[12,0.021,19,0.24,20,0.215,21,0.215,24,0.826,25,0.808,40,2,41,1.554,42,0.24,43,0.119,44,0.014,45,0.014,49,0.293,55,0.473,57,1.649,59,1.038,71,2.722,72,1.386,75,2.149,77,2.713,78,1.514,82,2.915,88,1.361,89,0.981,90,0.824,92,1.514,101,2.149,102,2.108,103,2.532,104,3.577,105,3.146,106,2,107,1.869,108,4.268,109,3.146,111,3.146,117,2.323,118,1.753,119,2.532,122,1.386,173,1.649,174,1.649,175,1.649,176,1.649,177,2.108,178,2.237,179,2.237,182,2.795,195,2.532,198,2.532,351,2.713,352,3.146,353,4.991,354,3.678,355,4.991,356,3.678,357,4.991,358,3.678,359,3.079,360,3.146,361,3.146,362,3.678,363,3.678]],["title/controllers/FirestoreController-1.html",[72,1.147,351,1.654,364,2.602]],["body/controllers/FirestoreController-1.html",[12,0.021,19,0.256,20,0.229,21,0.229,24,0.946,25,0.862,36,0.771,40,2.132,41,1.657,42,0.256,43,0.127,44,0.015,45,0.015,49,0.313,55,0.372,57,1.758,59,0.816,72,1.478,75,2.291,78,1.58,88,1.069,89,0.771,90,0.647,91,3.181,92,1.19,117,2.477,118,1.869,122,1.964,173,1.758,174,1.758,175,1.758,176,1.758,177,1.657,178,1.758,179,1.758,231,2.132,232,1.993,233,2.291,313,3.937,351,2.832,359,3.181,360,3.354,361,3.354,365,3.354,366,3.587,367,3.922,368,3.922,369,3.922,370,3.354,371,3.354,372,3.922,373,3.922,374,3.922,375,3.922,376,3.922]],["title/injectables/FirestoreService.html",[156,1.046,359,1.977]],["body/injectables/FirestoreService.html",[12,0.021,19,0.141,20,0.126,21,0.126,24,0.916,25,0.475,30,0.862,36,1.184,40,1.175,42,0.141,43,0.07,44,0.009,45,0.009,49,0.172,55,0.485,59,1.063,71,2.7,77,1.838,78,1.026,82,1.975,88,1.394,89,1.065,90,0.844,91,1.838,92,1.429,101,1.263,102,1.989,103,1.488,106,1.838,107,1.098,114,1.975,118,1.985,119,1.488,122,2.043,137,3.805,139,2.63,141,1.515,151,2.569,156,0.972,165,1.759,173,1.866,174,1.866,175,1.866,176,1.866,177,1.989,178,2.111,179,2.111,180,1.838,185,1.866,187,2.63,203,1.03,205,2.751,209,4.028,211,3.561,224,2.136,229,1.849,230,1.849,231,1.175,232,1.098,233,1.263,234,1.642,236,2.892,237,1.365,238,1.849,243,1.849,245,1.849,260,1.175,263,1.175,270,1.175,313,2.136,316,4.303,317,2.56,319,3.883,320,2.975,325,1.098,359,1.838,366,2.867,371,1.849,377,1.849,378,3.381,379,3.381,380,2.162,381,3.578,382,3.309,383,2.162,384,3.381,385,3.381,386,2.162,387,1.849,388,2.162,389,3.381,390,2.162,391,1.642,392,2.162,393,1.849,394,1.849,395,2.162,396,2.162,397,2.162,398,2.892,399,2.162,400,2.162,401,2.162,402,2.162,403,2.162]],["title/classes/GatewayController.html",[43,0.118,104,2.297]],["body/classes/GatewayController.html",[12,0.021,19,0.297,20,0.265,21,0.265,24,0.835,42,0.297,43,0.147,44,0.016,45,0.016,47,1.811,49,0.362,55,0.431,59,0.944,78,1.738,82,3.347,88,1.238,89,0.893,90,0.749,92,1.378,101,3.347,102,2.784,104,3.618,106,2.469,107,2.308,184,3.45,185,2.036,285,2.868,292,3.884,305,3.884,306,3.884,404,3.884,405,4.542,406,4.542]],["title/modules/GatewayModule.html",[0,1.536,13,2.297]],["body/modules/GatewayModule.html",[0,2.436,2,1.936,3,1.936,4,2.226,5,2.226,6,1.936,7,2.985,8,2.226,12,0.021,13,4.178,15,3.596,16,2.985,17,2.226,18,2.071,19,0.249,20,0.223,21,0.223,23,3.227,24,1.001,25,0.837,27,2.623,28,1.936,34,2.623,41,2.159,42,0.249,43,0.123,44,0.014,45,0.014,73,3.97,134,3.518,158,2.623,351,3.135,407,3.81,408,3.81,409,3.81,410,3.97,411,3.81,412,5.11,413,3.258,414,3.81,415,3.258,416,3.81,417,3.81,418,3.81]],["title/classes/GlobalFilter.html",[43,0.118,419,2.763]],["body/classes/GlobalFilter.html",[12,0.021,19,0.221,20,0.198,21,0.198,24,0.687,25,0.744,42,0.221,43,0.11,44,0.013,45,0.013,47,1.35,49,0.27,55,0.447,59,0.98,67,2.331,78,1.43,88,1.285,89,0.927,90,0.778,92,1.027,107,2.395,117,2.138,118,1.614,141,2.113,158,2.331,164,2.563,165,2.477,173,1.518,174,1.518,175,1.518,176,1.518,177,1.43,178,1.518,179,1.518,180,1.841,185,1.518,194,2.572,200,4.456,224,2.138,287,4.031,291,5.015,297,2.895,419,3.582,420,2.895,421,5.424,422,3.386,423,6.384,424,3.386,425,4.714,426,4.12,427,5.865,428,3.386,429,4.714,430,3.386,431,3.386,432,4.714,433,3.386,434,3.386,435,3.386,436,3.386,437,3.386,438,3.386,439,3.386,440,2.895,441,3.386,442,3.386,443,4.714,444,3.386,445,3.386,446,3.386,447,3.386]],["title/injectables/HashService.html",[156,1.046,309,1.977]],["body/injectables/HashService.html",[12,0.021,19,0.254,20,0.227,21,0.227,24,0.754,25,0.852,36,1.372,42,0.254,43,0.126,44,0.014,45,0.014,49,0.309,50,1.337,55,0.552,59,1.21,78,1.569,88,1.41,89,1.017,90,0.854,92,1.569,122,1.95,156,1.487,203,1.849,216,1.849,217,2.812,309,2.812,448,3.318,449,5.819,450,5.172,451,6.65,452,5.172,453,3.88,454,3.88,455,5.172,456,3.88,457,3.318,458,5.172,459,3.88,460,4.423,461,3.88,462,3.88,463,3.88]],["title/interfaces/JWTPayload.html",[65,0.844,162,1.63]],["body/interfaces/JWTPayload.html",[12,0.02,19,0.249,20,0.223,21,0.223,36,1.45,38,1.609,42,0.432,44,0.014,45,0.014,49,0.304,50,1.321,55,0.547,65,1.535,79,1.519,80,1.519,85,2.854,86,2.159,90,1.092,98,1.708,162,2.29,223,2.435,226,1.816,227,1.816,239,1.816,240,1.816,246,3.063,252,3.131,255,2.071,314,1.708,464,2.071]],["title/interfaces/LogInByEmailAndPassword.html",[65,0.844,79,1.45]],["body/interfaces/LogInByEmailAndPassword.html",[12,0.02,19,0.261,20,0.234,21,0.234,36,1.449,38,1.688,42,0.438,44,0.015,45,0.015,49,0.319,50,1.363,55,0.5,65,1.556,79,2.103,80,1.593,85,2.888,86,2.758,98,1.791,162,1.791,223,2.514,226,1.904,227,1.904,239,1.904,240,1.904,246,2.514,252,2.03,255,2.172,314,1.791,464,2.172]],["title/interfaces/LogInByRefreshToken.html",[65,0.844,80,1.45]],["body/interfaces/LogInByRefreshToken.html",[12,0.02,19,0.268,20,0.24,21,0.24,36,1.445,38,1.733,42,0.442,44,0.015,45,0.015,49,0.327,50,1.387,55,0.389,65,1.568,79,1.636,80,2.14,85,2.68,86,2.267,98,1.839,162,1.839,223,3.138,226,1.956,227,1.956,239,1.956,240,1.956,246,2.558,252,2.085,255,2.231,314,1.839,464,2.231]],["title/interfaces/LogInResponseDto.html",[65,0.844,239,1.733]],["body/interfaces/LogInResponseDto.html",[12,0.02,19,0.251,20,0.224,21,0.224,36,1.443,38,2.61,42,0.433,44,0.014,45,0.014,49,0.306,50,1.327,55,0.549,65,1.538,79,1.53,80,1.53,85,2.61,86,2.169,90,1.094,98,1.72,162,1.72,223,3.07,226,1.829,227,1.829,239,2.447,240,1.829,246,2.447,252,1.95,255,3.359,314,1.72,464,2.086]],["title/interfaces/MicroserviceResponse.html",[65,0.844,102,1.536]],["body/interfaces/MicroserviceResponse.html",[12,0.021,19,0.23,20,0.206,21,0.206,42,0.39,43,0.157,44,0.014,45,0.014,49,0.281,50,1.252,55,0.525,65,0.817,68,3.513,69,2.98,70,3.666,71,2.967,90,0.799,102,2.519,141,1.578,155,1.678,164,2.633,172,2.056,216,1.678,218,1.789,260,1.914,261,2.223,263,3.598,265,4.909,268,3.679,269,2.424,270,1.914,271,2.674,272,2.674,273,2.674,274,2.424,275,2.424,276,2.424,277,2.424,278,2.424,279,2.424,280,2.424,281,2.424,282,2.424,283,2.424,284,2.424,314,1.578]],["title/modules/MicroservicesModule.html",[0,1.536,14,2.297]],["body/modules/MicroservicesModule.html",[0,2.347,2,1.801,3,1.801,4,2.07,5,2.07,6,1.801,7,2.842,8,2.07,12,0.021,14,4.089,15,3.52,16,2.842,17,2.07,18,1.926,19,0.232,20,0.207,21,0.207,23,3.073,24,0.967,25,0.779,27,2.44,28,1.801,34,2.44,36,1.175,41,2.055,42,0.232,43,0.115,44,0.014,45,0.014,89,0.956,231,1.926,232,1.801,233,2.07,351,3.02,413,3.03,415,3.03,426,3.696,465,3.544,466,3.544,467,3.544,468,3.825,469,3.544,470,3.03,471,4.751,472,3.03,473,3.03,474,4.16,475,4.16,476,4.16,477,4.16,478,4.16,479,3.03]],["title/modules/ModulesModule.html",[0,1.536,15,1.977]],["body/modules/ModulesModule.html",[0,1.922,2,1.266,3,1.266,4,1.455,5,1.455,6,1.266,7,2.658,8,2.658,12,0.021,15,3.795,16,2.203,17,1.455,18,1.354,19,0.163,20,0.146,21,0.146,23,1.573,24,0.983,25,0.547,27,1.715,28,1.266,29,2.13,30,0.993,34,1.715,36,0.894,38,1.052,40,1.354,42,0.163,43,0.081,44,0.011,45,0.011,64,2.05,89,0.998,112,3.853,159,1.573,172,1.455,189,1.892,213,1.354,231,1.354,232,1.266,233,1.455,235,2.13,309,3.118,317,1.354,331,2.381,359,3.585,382,3.351,393,2.13,426,2.865,470,2.13,471,3.891,472,2.13,473,2.13,474,3.224,475,3.224,476,3.224,477,3.224,478,3.224,479,2.13,480,2.13,481,2.13,482,2.13,483,3.853,484,3.623,485,2.491,486,2.491,487,2.491,488,2.596,489,2.491,490,2.13,491,2.491,492,2.13,493,2.491,494,2.491,495,2.491,496,2.491,497,2.491,498,2.13,499,2.491,500,3.771,501,2.491,502,2.491]],["title/injectables/MongooseService.html",[156,1.046,382,2.124]],["body/injectables/MongooseService.html",[12,0.021,19,0.134,20,0.12,21,0.12,24,0.726,25,0.449,28,1.039,30,0.816,36,1.041,40,1.112,42,0.134,43,0.066,44,0.009,45,0.009,49,0.163,55,0.562,56,2.045,59,0.95,68,1.112,69,1.543,71,2.373,78,0.982,88,1.095,89,0.79,90,0.663,92,1.219,118,1.543,122,2.09,137,2.537,139,2.045,141,1.451,144,4.213,156,0.931,165,2.429,173,2.231,174,2.231,175,2.231,176,2.231,177,2.501,178,2.654,179,2.654,180,2.184,182,2.46,185,1.451,186,1.749,187,1.292,193,3.645,195,1.408,198,1.408,200,1.554,203,0.975,218,1.039,224,1.292,316,1.554,317,1.112,325,1.645,366,2.229,381,3.471,382,1.891,387,2.768,391,1.554,394,1.749,398,1.749,440,2.768,457,2.768,492,1.749,503,1.749,504,4.568,505,3.237,506,2.046,507,2.046,508,3.237,509,2.046,510,2.046,511,3.237,512,2.046,513,4.018,514,2.046,515,3.237,516,2.046,517,2.046,518,2.046,519,2.046,520,2.046,521,2.046,522,2.046,523,2.046,524,2.046,525,2.046,526,5.294,527,4.018,528,2.046,529,1.749,530,2.046,531,5.294,532,5.546,533,2.046,534,2.046,535,2.046,536,3.237,537,2.046]],["title/classes/Project.html",[43,0.118,538,2.504]],["body/classes/Project.html",[12,0.021,19,0.271,20,0.243,21,0.243,24,0.877,30,1.656,36,1.253,42,0.393,43,0.134,44,0.015,45,0.015,46,3.16,47,1.656,49,0.331,50,1.398,55,0.571,57,2.424,58,3.861,59,1.125,64,2.94,77,2.257,89,1.183,90,0.893,165,1.754,324,2.858,325,2.11,326,3.416,538,3.724,539,2.858,540,4.571,541,4.152,542,4.152,543,3.551,544,3.154,545,3.154,546,3.551]],["title/injectables/ProjectService.html",[156,1.046,484,2.297]],["body/injectables/ProjectService.html",[12,0.02,19,0.347,20,0.311,21,0.311,24,0.774,25,1.167,42,0.347,43,0.172,44,0.018,45,0.018,156,1.813,203,2.532,484,3.983,547,4.543]],["title/interfaces/RegisterByEmailAndPasswordDto.html",[65,0.844,98,1.63]],["body/interfaces/RegisterByEmailAndPasswordDto.html",[12,0.02,19,0.248,20,0.222,21,0.222,36,1.456,38,1.604,42,0.432,44,0.014,45,0.014,49,0.303,50,1.318,55,0.584,65,1.534,79,1.514,80,1.514,85,2.852,86,2.711,98,2.285,162,1.702,223,2.43,226,2.932,227,2.932,239,1.809,240,1.809,246,2.43,252,1.929,255,2.064,314,1.702,464,2.064]],["title/interfaces/RegisterResponseDto.html",[65,0.844,240,1.733]],["body/interfaces/RegisterResponseDto.html",[12,0.02,19,0.257,20,0.23,21,0.23,36,1.447,38,1.663,42,0.437,44,0.015,45,0.015,49,0.314,50,1.35,55,0.495,65,1.55,79,1.57,80,1.57,85,2.878,86,2.206,90,1.03,98,1.764,162,1.764,223,2.489,226,1.876,227,1.876,239,1.876,240,2.489,246,3.096,252,2,255,2.14,314,1.764,464,2.14]],["title/interfaces/ResponseDto.html",[65,0.844,66,2.297]],["body/interfaces/ResponseDto.html",[12,0.02,19,0.267,20,0.239,21,0.239,24,0.596,30,1.63,36,1.053,42,0.35,43,0.132,44,0.015,45,0.015,46,2.388,48,3.106,49,0.326,50,1.384,51,3.496,52,3.496,53,3.496,54,3.496,55,0.601,56,4.154,58,3.842,64,2.911,65,0.949,66,3.382,67,4.362,68,3.444,69,2.846,70,3.444,71,2.84,90,1.151,314,1.832]],["title/injectables/ResponseInterceptor.html",[156,1.046,548,2.763]],["body/injectables/ResponseInterceptor.html",[12,0.021,19,0.248,20,0.222,21,0.222,24,0.839,25,0.834,42,0.248,43,0.123,44,0.014,45,0.014,49,0.303,55,0.36,56,2.398,59,0.789,66,3.22,67,2.614,68,2.064,70,2.064,71,2.285,78,1.546,88,1.035,89,0.746,90,0.627,92,1.152,122,1.922,148,4.675,150,2.884,155,1.809,156,1.466,164,2.064,165,1.604,173,1.702,174,1.702,175,2.758,176,1.702,177,1.604,178,1.702,179,1.702,180,2.064,185,1.702,203,1.809,218,1.929,237,2.398,257,4.36,335,4.36,336,4.36,337,5.262,339,4.922,340,4.36,342,3.247,548,3.873,549,3.247,550,3.797,551,3.797,552,3.797,553,3.797]],["title/controllers/StorageController.html",[72,1.371,554,2.763]],["body/controllers/StorageController.html",[12,0.02,19,0.344,20,0.307,21,0.307,24,0.767,25,1.156,41,2.222,42,0.344,43,0.17,44,0.018,45,0.018,72,1.983,75,3.073,554,4.763,555,4.498,556,5.26,557,5.26]],["title/classes/SuccessMicroserviceResponse.html",[43,0.118,270,1.977]],["body/classes/SuccessMicroserviceResponse.html",[12,0.021,19,0.216,20,0.193,21,0.193,42,0.379,43,0.15,44,0.013,45,0.013,47,1.317,49,0.263,50,1.197,55,0.55,59,1.206,65,0.766,68,3.321,69,2.764,70,3.536,71,2.915,88,0.9,89,0.649,90,0.545,102,2.45,141,2.076,155,1.574,164,2.909,172,1.929,216,2.55,217,2.518,218,2.354,260,1.795,261,2.085,263,3.443,265,4.941,268,4.065,269,2.273,270,2.518,271,3.519,272,2.509,273,2.509,274,2.273,275,2.273,276,2.273,277,2.273,278,2.273,279,2.273,280,2.273,281,2.273,282,2.273,283,2.273,284,2.273,558,4.632,559,3.302,560,3.302]],["title/controllers/TestController.html",[72,1.371,410,2.504]],["body/controllers/TestController.html",[12,0.021,19,0.297,20,0.265,21,0.265,24,0.662,25,0.998,41,1.918,42,0.297,43,0.147,44,0.016,45,0.016,49,0.362,55,0.431,57,2.036,59,0.944,72,1.712,75,2.653,78,1.738,88,1.238,89,0.893,90,0.749,92,1.378,106,3.412,107,2.308,410,3.944,561,3.884,562,5.367,563,4.542,564,4.542,565,4.542,566,4.542,567,4.542,568,4.542,569,4.542,570,4.542]],["title/classes/User.html",[43,0.118,213,1.977]],["body/classes/User.html",[12,0.021,19,0.209,20,0.187,21,0.187,24,0.767,30,1.277,36,1.4,42,0.344,43,0.104,44,0.013,45,0.013,46,2.648,47,1.277,49,0.255,50,1.172,55,0.635,57,2.952,58,4.182,59,1.369,64,2.464,77,1.741,85,2.223,86,2.223,165,1.353,213,2.464,223,2.508,226,2.508,227,2.508,246,2.508,324,2.205,325,1.627,326,2.863,488,2.205,543,2.739,571,2.205,572,5.263,573,5.263,574,3.203,575,3.203,576,3.203,577,3.203,578,3.203,579,3.203,580,3.203,581,3.203,582,2.433,583,2.739]],["title/controllers/UserController.html",[72,1.371,468,2.504]],["body/controllers/UserController.html",[12,0.021,19,0.216,20,0.193,21,0.193,24,0.891,25,0.726,41,1.395,42,0.216,43,0.107,44,0.013,45,0.013,49,0.263,55,0.508,57,2.398,59,1.112,72,1.245,75,1.929,78,1.405,79,2.525,80,2.525,83,2.824,88,1.459,89,1.052,90,0.883,91,3.608,92,1.623,93,2.824,98,2.6,110,2.824,117,2.085,118,1.574,122,2.017,124,3.961,125,3.961,126,2.824,127,2.824,207,3.684,213,1.795,231,1.795,232,1.678,233,1.929,370,2.824,468,3.189,483,3.126,584,2.824,585,3.302,586,3.302,587,3.302,588,3.302,589,3.302,590,3.302,591,3.302,592,3.302,593,3.302,594,3.302,595,3.302,596,3.302,597,3.302,598,3.302,599,3.302,600,3.302,601,3.302]],["title/injectables/UserService.html",[156,1.046,483,2.124]],["body/injectables/UserService.html",[12,0.021,19,0.133,20,0.119,21,0.119,24,0.838,25,0.449,28,1.037,30,0.814,36,1.359,38,0.862,42,0.133,43,0.066,44,0.009,45,0.009,49,0.163,55,0.433,59,0.949,78,0.98,85,2.56,86,2.612,88,1.244,89,0.897,90,0.753,91,1.757,92,1.217,118,2.175,122,2.23,137,3.737,139,2.882,141,1.449,143,4.21,144,4.21,155,1.54,156,0.93,159,1.289,165,1.695,173,0.915,174,0.915,175,0.915,176,0.915,177,0.862,178,0.915,179,0.915,180,1.11,185,2.652,187,3.5,189,1.551,203,0.973,207,2.763,213,3.124,223,2.37,224,2.534,225,1.746,226,2.37,227,2.37,234,1.551,246,0.973,252,1.037,259,2.764,260,2.181,263,1.11,270,2.181,309,3.012,325,1.037,381,3.467,391,1.551,483,1.888,490,1.746,498,1.746,602,1.746,603,3.232,604,3.232,605,2.042,606,2.042,607,3.232,608,3.232,609,2.042,610,3.232,611,2.042,612,2.042,613,2.042,614,2.042,615,2.042,616,2.042,617,1.746,618,2.042,619,2.042,620,2.042,621,3.232,622,2.042,623,3.232,624,2.042,625,2.042,626,2.042,627,2.042,628,2.042,629,2.042,630,2.042,631,2.042,632,2.042,633,2.042,634,3.232,635,2.042,636,2.042,637,2.042]],["title/coverage.html",[638,3.762]],["body/coverage.html",[6,1.145,12,0.021,21,0.132,43,0.205,44,0.01,45,0.01,46,1.316,48,2.653,55,0.457,65,1.416,66,1.423,72,2.078,73,1.551,74,1.927,79,0.899,80,0.899,98,1.01,102,0.952,104,1.423,112,1.316,114,1.316,133,1.712,134,1.551,136,1.927,156,1.709,161,1.712,162,1.01,185,1.01,204,1.927,205,1.316,213,1.225,232,1.145,239,1.074,240,1.074,260,1.225,261,2.701,270,1.225,285,1.423,286,1.927,293,1.712,301,1.927,309,1.225,313,1.423,315,1.927,317,1.225,318,3.042,320,1.423,330,1.551,331,1.423,333,1.712,334,1.927,351,1.898,352,1.927,359,1.225,365,1.927,377,1.927,382,1.316,404,1.927,410,1.551,419,1.712,420,1.927,448,1.927,464,2.997,468,1.551,483,1.316,484,1.423,488,1.551,503,1.927,538,1.551,539,2.944,544,1.712,545,1.712,547,1.927,548,1.712,549,1.927,554,1.712,555,1.927,561,1.927,571,2.944,582,1.712,584,1.927,602,1.927,617,6.3,638,1.712,639,1.927,640,2.253,641,2.253,642,1.927,643,5.751,644,6.531,645,2.986,646,5.751,647,5.751,648,5.751,649,1.927,650,6.102,651,1.927,652,2.253,653,2.253,654,2.253,655,4.276,656,2.253,657,2.253,658,2.253]],["title/dependencies.html",[3,2.221,659,2.602]],["body/dependencies.html",[3,2.421,12,0.021,25,1.047,28,2.421,30,1.9,38,2.013,44,0.016,45,0.016,158,3.281,159,3.01,160,4.075,231,2.59,237,3.01,325,2.421,460,4.075,660,6.705,661,4.765,662,4.765,663,4.765,664,4.765,665,4.765,666,4.765,667,4.765,668,4.765,669,4.765,670,4.765,671,4.765]],["title/miscellaneous/enumerations.html",[672,1.546,673,3.738]],["body/miscellaneous/enumerations.html",[12,0.02,44,0.017,45,0.017,49,0.394,216,2.355,217,3.852,261,3.121,263,3.282,274,3.403,275,3.403,276,3.403,277,3.403,278,3.403,279,3.403,280,3.403,281,3.403,282,3.403,283,3.403,284,3.403,672,2.511,673,4.226,674,4.942]],["title/miscellaneous/functions.html",[672,1.546,675,3.738]],["body/miscellaneous/functions.html",[6,3.476,12,0.018,44,0.018,45,0.018,49,0.441,651,4.732,672,2.812,675,4.732,676,5.533]],["title/index.html",[49,0.243,677,3.042,678,3.042]],["body/index.html",[12,0.019,18,3.099,20,0.143,44,0.01,45,0.01,177,1.035,194,1.862,529,2.096,538,3.465,540,1.862,562,3.185,638,1.862,639,3.185,679,2.45,680,2.45,681,4.505,682,3.725,683,2.45,684,2.45,685,2.45,686,2.45,687,3.725,688,4.505,689,2.45,690,2.45,691,2.45,692,5.033,693,6.253,694,2.45,695,6.105,696,2.45,697,2.45,698,2.45,699,4.505,700,2.45,701,2.45,702,2.45,703,3.725,704,2.45,705,4.505,706,2.45,707,2.45,708,2.45,709,2.45,710,2.45,711,2.45,712,4.505,713,2.45,714,2.45,715,5.033,716,6.105,717,5.7,718,3.725,719,2.45,720,2.45,721,2.45,722,2.45,723,2.45,724,5.7,725,5.033,726,2.45,727,3.725,728,2.45,729,2.45,730,3.725,731,5.7,732,5.033,733,2.45,734,3.725,735,2.45,736,2.45,737,2.45,738,2.45,739,5.033,740,2.45,741,2.45,742,2.45,743,2.45,744,3.725,745,2.45,746,2.45,747,2.45,748,2.45,749,2.45,750,3.725,751,2.45,752,2.45,753,2.45,754,3.725,755,2.45,756,2.45,757,4.304,758,3.725,759,2.45,760,2.45,761,2.45,762,2.45,763,2.45,764,2.45,765,2.45,766,2.45,767,3.725,768,2.45,769,2.45,770,2.45,771,2.45,772,4.505,773,2.45,774,2.45,775,2.45,776,2.45,777,2.45,778,2.45,779,3.725,780,2.45,781,2.45,782,2.45,783,2.45,784,2.45,785,3.725,786,2.45,787,2.45,788,2.45,789,3.725,790,3.725,791,2.45,792,2.45,793,2.45,794,2.45,795,2.45,796,2.45,797,2.45,798,2.45,799,2.45,800,2.45,801,2.096,802,2.45,803,2.45,804,2.45,805,2.45,806,2.45,807,2.45,808,2.096]],["title/modules.html",[2,2.516]],["body/modules.html",[1,3.484,2,2.571,11,3.196,12,0.017,13,3.196,14,3.196,15,2.751,44,0.017,45,0.017,757,5.995,809,7.01,810,7.01,811,7.01]],["title/overview.html",[812,4.235]],["body/overview.html",[0,1.463,1,4.752,2,1.76,3,1.76,4,2.023,5,2.023,6,1.76,7,2.023,8,2.023,9,2.961,10,2.961,11,3.926,12,0.02,13,3.926,14,3.926,15,3.971,16,2.797,17,2.023,18,1.882,41,1.463,44,0.013,45,0.013,47,1.381,112,3.85,133,2.631,203,1.65,307,2.961,308,2.961,309,3.219,314,1.552,359,3.582,364,2.961,382,3.206,480,2.961,481,2.961,482,2.961,483,3.85,484,3.466,812,2.961,813,3.463,814,3.463,815,3.463,816,3.463,817,3.463]],["title/properties.html",[50,1.13,659,2.602]],["body/properties.html",[12,0.02,44,0.018,45,0.018,50,1.401,540,4.118,801,4.635,808,4.635,818,5.421,819,5.421,820,5.421,821,5.421]],["title/miscellaneous/typealiases.html",[672,1.546,822,4.371]],["body/miscellaneous/typealiases.html",[12,0.017,44,0.017,45,0.017,49,0.417,55,0.497,318,3.306,326,4.221,330,4.303,539,3.603,544,4.749,571,3.603,582,4.749,672,2.659,823,5.234,824,4.476,825,4.476,826,4.476]],["title/miscellaneous/variables.html",[672,1.546,827,3.738]],["body/miscellaneous/variables.html",[12,0.021,36,0.733,40,2.739,44,0.014,45,0.014,49,0.297,55,0.541,76,4.308,79,1.487,80,1.487,85,2.128,86,2.128,89,0.99,94,3.19,95,2.834,114,2.943,161,3.827,166,3.19,172,2.179,193,3.468,207,2.568,216,3.203,217,3.654,232,2.56,293,3.827,318,2.356,331,3.182,332,2.834,366,2.568,488,3.468,539,2.568,545,3.827,546,3.19,571,2.568,583,3.19,642,3.19,645,3.19,649,3.19,672,1.895,824,3.19,825,3.19,826,3.19,827,3.19,828,3.73,829,5.038,830,3.73,831,3.73,832,5.038,833,3.73,834,5.038,835,3.73]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":617,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":819,"title":{},"body":{"properties.html":{}}}],["0.2.2",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["00x0000",{"_index":274,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["01x0001",{"_index":276,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["01x0002",{"_index":278,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["01x0003",{"_index":280,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["01x0004",{"_index":282,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["01x0005",{"_index":284,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["1",{"_index":364,"title":{"controllers/FirestoreController-1.html":{}},"body":{"overview.html":{}}}],["10",{"_index":458,"title":{},"body":{"injectables/HashService.html":{}}}],["11",{"_index":816,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["11.0.11",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":570,"title":{},"body":{"controllers/TestController.html":{}}}],["4.0.1",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":813,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["5.6.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":814,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":815,"title":{},"body":{"overview.html":{}}}],["8.12.1",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":817,"title":{},"body":{"overview.html":{}}}],["_model",{"_index":519,"title":{},"body":{"injectables/MongooseService.html":{}}}],["_model(data",{"_index":521,"title":{},"body":{"injectables/MongooseService.html":{}}}],["_schema",{"_index":515,"title":{},"body":{"injectables/MongooseService.html":{}}}],["access",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"injectables/MongooseService.html":{}}}],["accesstoken",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{}}}],["aftercallmicroservice",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseService.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{}}}],["aftercallmicroservice(res",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseService.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{}}}],["alias",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":745,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":795,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":412,"title":{},"body":{"modules/GatewayModule.html":{}}}],["application",{"_index":717,"title":{},"body":{"index.html":{}}}],["applications",{"_index":687,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argument",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/FirestoreController.html":{},"injectables/MongooseService.html":{}}}],["argumentshost",{"_index":427,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["array",{"_index":527,"title":{},"body":{"injectables/MongooseService.html":{}}}],["assigning",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{}}}],["assignment",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["async",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{}}}],["auditentity",{"_index":46,"title":{"classes/AuditEntity.html":{}},"body":{"classes/AuditEntity.html":{},"classes/Project.html":{},"interfaces/ResponseDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["auth",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["auth.type",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/auth.controller",{"_index":414,"title":{},"body":{"modules/GatewayModule.html":{}}}],["auth/auth.service",{"_index":487,"title":{},"body":{"modules/ModulesModule.html":{}}}],["authcontroller",{"_index":73,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/GatewayModule.html":{},"coverage.html":{}}}],["authguard",{"_index":134,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/GatewayModule.html":{},"coverage.html":{}}}],["author",{"_index":801,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":112,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ModulesModule.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":433,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["await",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":734,"title":{},"body":{"index.html":{}}}],["backers",{"_index":796,"title":{},"body":{"index.html":{}}}],["badmicroserviceresponse",{"_index":260,"title":{"classes/BadMicroserviceResponse.html":{}},"body":{"classes/BadMicroserviceResponse.html":{},"injectables/FirestoreService.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["badmicroserviceresponse(microserviceerrorcode.default",{"_index":400,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["badmicroserviceresponse(microserviceerrorcode.duplicate_email",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["badmicroserviceresponse(microserviceerrorcode.email_not_found",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["badmicroserviceresponse(microserviceerrorcode.user_not_found",{"_index":635,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestalertexception",{"_index":285,"title":{"classes/BadRequestAlertException.html":{}},"body":{"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"classes/GatewayController.html":{},"coverage.html":{}}}],["badrequestalertexception(res.errorcode",{"_index":306,"title":{},"body":{"classes/BaseService.html":{},"classes/GatewayController.html":{}}}],["base/base.type",{"_index":543,"title":{},"body":{"classes/Project.html":{},"classes/User.html":{}}}],["based",{"_index":729,"title":{},"body":{"index.html":{}}}],["baseservice",{"_index":205,"title":{"classes/BaseService.html":{}},"body":{"injectables/AuthService.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"injectables/FirestoreService.html":{},"coverage.html":{}}}],["baseservice:5",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["bcrypt",{"_index":460,"title":{},"body":{"injectables/HashService.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(target",{"_index":463,"title":{},"body":{"injectables/HashService.html":{}}}],["bcrypt.hashsync(value",{"_index":461,"title":{},"body":{"injectables/HashService.html":{}}}],["bearer",{"_index":202,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bigint",{"_index":536,"title":{},"body":{"injectables/MongooseService.html":{}}}],["board",{"_index":788,"title":{},"body":{"index.html":{}}}],["body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{}}}],["boolean",{"_index":69,"title":{},"body":{"classes/AuditEntity.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"interfaces/ResponseDto.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":811,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":809,"title":{},"body":{"modules.html":{}}}],["building",{"_index":682,"title":{},"body":{"index.html":{}}}],["call",{"_index":522,"title":{},"body":{"injectables/MongooseService.html":{}}}],["callcreaterecord",{"_index":378,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["callcreaterecord(schemaname",{"_index":385,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["callhandler",{"_index":337,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["canactivate",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{}}}],["catch(exception",{"_index":425,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["catcherror",{"_index":341,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror((e",{"_index":343,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["certain",{"_index":430,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["channel",{"_index":760,"title":{},"body":{"index.html":{}}}],["check",{"_index":724,"title":{},"body":{"index.html":{}}}],["class",{"_index":43,"title":{"classes/AuditEntity.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"classes/Project.html":{},"classes/SuccessMicroserviceResponse.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":47,"title":{},"body":{"classes/AuditEntity.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"classes/Project.html":{},"classes/SuccessMicroserviceResponse.html":{},"classes/User.html":{},"overview.html":{}}}],["clicks",{"_index":744,"title":{},"body":{"index.html":{}}}],["client",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["clientredis",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["clientsmodule",{"_index":470,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["clientsmodule.register",{"_index":472,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["cloud",{"_index":728,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":307,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":308,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_gatewaymodule",{"_index":407,"title":{},"body":{"modules/GatewayModule.html":{}}}],["cluster_gatewaymodule_imports",{"_index":408,"title":{},"body":{"modules/GatewayModule.html":{}}}],["cluster_microservicesmodule",{"_index":465,"title":{},"body":{"modules/MicroservicesModule.html":{}}}],["cluster_microservicesmodule_imports",{"_index":466,"title":{},"body":{"modules/MicroservicesModule.html":{}}}],["cluster_modulesmodule",{"_index":480,"title":{},"body":{"modules/ModulesModule.html":{},"overview.html":{}}}],["cluster_modulesmodule_exports",{"_index":482,"title":{},"body":{"modules/ModulesModule.html":{},"overview.html":{}}}],["cluster_modulesmodule_providers",{"_index":481,"title":{},"body":{"modules/ModulesModule.html":{},"overview.html":{}}}],["come",{"_index":751,"title":{},"body":{"index.html":{}}}],["compare",{"_index":450,"title":{},"body":{"injectables/HashService.html":{}}}],["compare(target",{"_index":452,"title":{},"body":{"injectables/HashService.html":{}}}],["compileloginresponse",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["compileloginresponse(user",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["condition",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{}}}],["configmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["configmodule.forroot",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["configservice",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{}}}],["conn",{"_index":517,"title":{},"body":{"injectables/MongooseService.html":{}}}],["conn.model(schemaname",{"_index":520,"title":{},"body":{"injectables/MongooseService.html":{}}}],["connectionname",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(error",{"_index":535,"title":{},"body":{"injectables/MongooseService.html":{}}}],["const",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"classes/SuccessMicroserviceResponse.html":{},"injectables/UserService.html":{}}}],["constructor(client",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(data",{"_index":271,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["constructor(dynamicmodel",{"_index":380,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["constructor(dynamicschemamodel",{"_index":506,"title":{},"body":{"injectables/MongooseService.html":{}}}],["constructor(errorcode",{"_index":262,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{}}}],["constructor(httpadapterhost",{"_index":422,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["constructor(jwtservice",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(private",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"classes/GlobalFilter.html":{},"controllers/UserController.html":{}}}],["constructor(usermodel",{"_index":605,"title":{},"body":{"injectables/UserService.html":{}}}],["context",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["context.getclass",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":72,"title":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"controllers/StorageController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"controllers/StorageController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller(\"test",{"_index":565,"title":{},"body":{"controllers/TestController.html":{}}}],["controller(\"user",{"_index":593,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('auth",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('firestore",{"_index":361,"title":{},"body":{"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{}}}],["controller('storage",{"_index":557,"title":{},"body":{"controllers/StorageController.html":{}}}],["controllers",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/CoreModule.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"controllers/StorageController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["core/core.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["core/exceptions/badrequestalertexception",{"_index":304,"title":{},"body":{"classes/BaseService.html":{}}}],["core/microservice/microservice.type",{"_index":303,"title":{},"body":{"classes/BaseService.html":{}}}],["coremodule",{"_index":11,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["courses",{"_index":766,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":638,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":353,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["create(@param",{"_index":362,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["create(params",{"_index":354,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["createconnection",{"_index":504,"title":{},"body":{"injectables/MongooseService.html":{}}}],["createdat",{"_index":51,"title":{},"body":{"classes/AuditEntity.html":{},"interfaces/ResponseDto.html":{}}}],["createdby",{"_index":52,"title":{},"body":{"classes/AuditEntity.html":{},"interfaces/ResponseDto.html":{}}}],["createfirestorerecord",{"_index":313,"title":{"interfaces/CreateFirestoreRecord.html":{}},"body":{"interfaces/CreateFirestoreRecord.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"coverage.html":{}}}],["createrecord",{"_index":366,"title":{},"body":{"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{},"miscellaneous/variables.html":{}}}],["createrecord(@payload",{"_index":373,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["createrecord(payload",{"_index":367,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["createrecord(schemaname",{"_index":387,"title":{},"body":{"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{}}}],["ctx",{"_index":438,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["data",{"_index":71,"title":{},"body":{"classes/AuditEntity.html":{},"classes/BadMicroserviceResponse.html":{},"interfaces/CreateFirestoreRecord.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["data[key",{"_index":531,"title":{},"body":{"injectables/MongooseService.html":{}}}],["datatype",{"_index":513,"title":{},"body":{"injectables/MongooseService.html":{}}}],["datatype[key",{"_index":532,"title":{},"body":{"injectables/MongooseService.html":{}}}],["date",{"_index":56,"title":{},"body":{"classes/AuditEntity.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/MongooseService.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{}}}],["date().toisostring",{"_index":444,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["date.parse(`${data[key",{"_index":533,"title":{},"body":{"injectables/MongooseService.html":{}}}],["debug",{"_index":701,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"overview.html":{}}}],["decorators",{"_index":57,"title":{},"body":{"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"classes/Project.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["deeper",{"_index":762,"title":{},"body":{"index.html":{}}}],["default",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/HashService.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":328,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{}}}],["defined",{"_index":59,"title":{},"body":{"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":715,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":733,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":712,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":743,"title":{},"body":{"index.html":{}}}],["description",{"_index":540,"title":{},"body":{"classes/Project.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":696,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":774,"title":{},"body":{"index.html":{}}}],["disable",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["discord",{"_index":759,"title":{},"body":{"index.html":{}}}],["dive",{"_index":761,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":639,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["duplicate_email",{"_index":275,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["dynamicmodel",{"_index":384,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["dynamicschema",{"_index":317,"title":{"classes/DynamicSchema.html":{}},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/FirestoreService.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"coverage.html":{}}}],["dynamicschema.name",{"_index":502,"title":{},"body":{"modules/ModulesModule.html":{}}}],["dynamicschema.save",{"_index":403,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["dynamicschemadocument",{"_index":330,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dynamicschemamodel",{"_index":508,"title":{},"body":{"injectables/MongooseService.html":{}}}],["dynamicschemaschema",{"_index":331,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"modules/ModulesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["e",{"_index":345,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["e2e",{"_index":707,"title":{},"body":{"index.html":{}}}],["e['time",{"_index":344,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["efficient",{"_index":683,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":722,"title":{},"body":{"index.html":{}}}],["email",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["email_not_found",{"_index":277,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["ensure",{"_index":720,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":778,"title":{},"body":{"index.html":{}}}],["enum",{"_index":273,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["enumerations",{"_index":673,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":68,"title":{},"body":{"classes/AuditEntity.html":{},"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["errorcode",{"_index":70,"title":{},"body":{"classes/AuditEntity.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"interfaces/MicroserviceResponse.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["errormessage",{"_index":293,"title":{},"body":{"classes/BadRequestAlertException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errormessage[this.errorcode",{"_index":300,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["eslint",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["eslint/no",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["example",{"_index":692,"title":{},"body":{"index.html":{}}}],["exception",{"_index":429,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["exception.getstatus",{"_index":441,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["exceptionfilter",{"_index":421,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["exceptioninterceptor",{"_index":333,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptions/badrequestalertexception",{"_index":406,"title":{},"body":{"classes/GatewayController.html":{}}}],["exec",{"_index":616,"title":{},"body":{"injectables/UserService.html":{}}}],["executioncontext",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["experience",{"_index":764,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":498,"title":{},"body":{"modules/ModulesModule.html":{},"injectables/UserService.html":{}}}],["export",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"overview.html":{}}}],["express",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestAlertException.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{},"classes/Project.html":{},"classes/User.html":{}}}],["extracttokenfromheader",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{}}}],["false",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["fast",{"_index":737,"title":{},"body":{"index.html":{}}}],["features",{"_index":747,"title":{},"body":{"index.html":{}}}],["few",{"_index":739,"title":{},"body":{"index.html":{}}}],["field",{"_index":320,"title":{"classes/Field.html":{}},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/FirestoreService.html":{},"coverage.html":{}}}],["fields",{"_index":319,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/FirestoreService.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findonebyemailandpassword",{"_index":603,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemailandpassword(email",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyrefreshtoken",{"_index":604,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyrefreshtoken(refreshtoken",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["firestore",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"miscellaneous/variables.html":{}}}],["firestore.type",{"_index":371,"title":{},"body":{"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{}}}],["firestore/firestore.controller",{"_index":415,"title":{},"body":{"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{}}}],["firestore/firestore.service",{"_index":491,"title":{},"body":{"modules/ModulesModule.html":{}}}],["firestore/firestore.type",{"_index":492,"title":{},"body":{"modules/ModulesModule.html":{},"injectables/MongooseService.html":{}}}],["firestorecontroller",{"_index":351,"title":{"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{}},"body":{"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"coverage.html":{}}}],["firestoreservice",{"_index":359,"title":{"injectables/FirestoreService.html":{}},"body":{"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"modules/ModulesModule.html":{},"coverage.html":{},"overview.html":{}}}],["firstname",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["firstvaluefrom",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["flow",{"_index":711,"title":{},"body":{"index.html":{}}}],["focus",{"_index":746,"title":{},"body":{"index.html":{}}}],["follow",{"_index":782,"title":{},"body":{"index.html":{}}}],["framework",{"_index":681,"title":{},"body":{"index.html":{}}}],["fromdatatotype",{"_index":505,"title":{},"body":{"injectables/MongooseService.html":{}}}],["fromdatatotype(data",{"_index":511,"title":{},"body":{"injectables/MongooseService.html":{}}}],["full",{"_index":777,"title":{},"body":{"index.html":{}}}],["function",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":675,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":742,"title":{},"body":{"index.html":{}}}],["gateway/gateway.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewaycontroller",{"_index":104,"title":{"classes/GatewayController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{},"classes/GatewayController.html":{},"coverage.html":{}}}],["gatewaycontroller:5",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{}}}],["gatewaymodule",{"_index":13,"title":{"modules/GatewayModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GatewayModule.html":{},"modules.html":{},"overview.html":{}}}],["getresponse",{"_index":288,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["getting",{"_index":677,"title":{"index.html":{}},"body":{}}],["global",{"_index":495,"title":{},"body":{"modules/ModulesModule.html":{}}}],["globalfilter",{"_index":419,"title":{"classes/GlobalFilter.html":{}},"body":{"classes/GlobalFilter.html":{},"coverage.html":{}}}],["graph",{"_index":769,"title":{},"body":{"index.html":{}}}],["grow",{"_index":792,"title":{},"body":{"index.html":{}}}],["guard",{"_index":133,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handle",{"_index":710,"title":{},"body":{"index.html":{}}}],["handlers",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hands",{"_index":763,"title":{},"body":{"index.html":{}}}],["handy",{"_index":752,"title":{},"body":{"index.html":{}}}],["hash",{"_index":451,"title":{},"body":{"injectables/HashService.html":{}}}],["hash(value",{"_index":455,"title":{},"body":{"injectables/HashService.html":{}}}],["hash/hash.service",{"_index":311,"title":{},"body":{"modules/CoreModule.html":{}}}],["hashservice",{"_index":309,"title":{"injectables/HashService.html":{}},"body":{"modules/CoreModule.html":{},"injectables/HashService.html":{},"modules/ModulesModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["help",{"_index":767,"title":{},"body":{"index.html":{}}}],["here",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{},"classes/GlobalFilter.html":{},"index.html":{}}}],["host",{"_index":426,"title":{},"body":{"classes/GlobalFilter.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["host.switchtohttp",{"_index":439,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["httpadapter",{"_index":432,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["httpadapter.getrequesturl(ctx.getrequest",{"_index":446,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":447,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["httpadapterhost",{"_index":423,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["httpexception",{"_index":287,"title":{},"body":{"classes/BadRequestAlertException.html":{},"classes/GlobalFilter.html":{}}}],["https://nestjs.com",{"_index":805,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":291,"title":{},"body":{"classes/BadRequestAlertException.html":{},"classes/GlobalFilter.html":{}}}],["httpstatus.bad_request",{"_index":296,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["httpstatus.internal_server_error",{"_index":442,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["hydrateddocument",{"_index":326,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"classes/Project.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["ignorerefreshtoken",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"classes/BadMicroserviceResponse.html":{},"injectables/ExceptionInterceptor.html":{},"classes/GlobalFilter.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["incorrect_refresh_token",{"_index":283,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":49,"title":{"index.html":{}},"body":{"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["information",{"_index":726,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":749,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{}}}],["inject",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["inject(microserviceconfig.auth.name",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(microserviceconfig.firestore.name",{"_index":395,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["injectable",{"_index":156,"title":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/FirestoreService.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/FirestoreService.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/FirestoreService.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":391,"title":{},"body":{"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{}}}],["injectmodel(dynamicschema.name",{"_index":394,"title":{},"body":{"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{}}}],["injectmodel(user.name",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":741,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":694,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":440,"title":{},"body":{"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{}}}],["interact",{"_index":770,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":335,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":336,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["interface",{"_index":65,"title":{"interfaces/CreateFirestoreRecord.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{}},"body":{"classes/AuditEntity.html":{},"classes/BadMicroserviceResponse.html":{},"interfaces/CreateFirestoreRecord.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"classes/SuccessMicroserviceResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":314,"title":{},"body":{"interfaces/CreateFirestoreRecord.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"overview.html":{}}}],["ioredis",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["is_public_key",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnan(date",{"_index":534,"title":{},"body":{"injectables/MongooseService.html":{}}}],["ispublic",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["job",{"_index":785,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":787,"title":{},"body":{"index.html":{}}}],["join",{"_index":798,"title":{},"body":{"index.html":{}}}],["jwt_refresh_token_expires_in",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["jwtmodule",{"_index":486,"title":{},"body":{"modules/ModulesModule.html":{}}}],["jwtmodule.register",{"_index":494,"title":{},"body":{"modules/ModulesModule.html":{}}}],["jwtpayload",{"_index":162,"title":{"interfaces/JWTPayload.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"coverage.html":{}}}],["jwtservice",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["kamil",{"_index":802,"title":{},"body":{"index.html":{}}}],["key",{"_index":529,"title":{},"body":{"injectables/MongooseService.html":{},"index.html":{}}}],["lastmodifiedat",{"_index":53,"title":{},"body":{"classes/AuditEntity.html":{},"interfaces/ResponseDto.html":{}}}],["lastmodifiedby",{"_index":54,"title":{},"body":{"classes/AuditEntity.html":{},"interfaces/ResponseDto.html":{}}}],["lastname",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":755,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"overview.html":{}}}],["license",{"_index":808,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":790,"title":{},"body":{"index.html":{}}}],["line",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["linkedin",{"_index":784,"title":{},"body":{"index.html":{}}}],["loginbyemailandpassword",{"_index":79,"title":{"interfaces/LogInByEmailAndPassword.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loginbyemailandpassword(@body",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginbyemailandpassword(@payload",{"_index":597,"title":{},"body":{"controllers/UserController.html":{}}}],["loginbyemailandpassword(email",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbyemailandpassword(payload",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["loginbyrefreshtoken",{"_index":80,"title":{"interfaces/LogInByRefreshToken.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loginbyrefreshtoken(@body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginbyrefreshtoken(@payload",{"_index":600,"title":{},"body":{"controllers/UserController.html":{}}}],["loginbyrefreshtoken(payload",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["loginbyrefreshtoken(refreshtoken",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginresponsedto",{"_index":239,"title":{"interfaces/LogInResponseDto.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"coverage.html":{}}}],["looking",{"_index":727,"title":{},"body":{"index.html":{}}}],["loop",{"_index":780,"title":{},"body":{"index.html":{}}}],["makes",{"_index":735,"title":{},"body":{"index.html":{}}}],["managing",{"_index":748,"title":{},"body":{"index.html":{}}}],["map",{"_index":551,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["map((data",{"_index":553,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["matching",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":731,"title":{},"body":{"index.html":{}}}],["member",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"injectables/MongooseService.html":{}}}],["message",{"_index":299,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["messagepattern",{"_index":370,"title":{},"body":{"controllers/FirestoreController-1.html":{},"controllers/UserController.html":{}}}],["messagepattern(microserviceconfig.auth.patterns.loginbyemailandpassword",{"_index":596,"title":{},"body":{"controllers/UserController.html":{}}}],["messagepattern(microserviceconfig.auth.patterns.loginbyrefreshtoken",{"_index":599,"title":{},"body":{"controllers/UserController.html":{}}}],["messagepattern(microserviceconfig.auth.patterns.registerbyemailandpassword",{"_index":594,"title":{},"body":{"controllers/UserController.html":{}}}],["messagepattern(microserviceconfig.firestore.patterns.createrecord",{"_index":372,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["messagepattern(undefined.createrecord",{"_index":368,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["messagepattern(undefined.loginbyemailandpassword",{"_index":585,"title":{},"body":{"controllers/UserController.html":{}}}],["messagepattern(undefined.loginbyrefreshtoken",{"_index":587,"title":{},"body":{"controllers/UserController.html":{}}}],["messagepattern(undefined.registerbyemailandpassword",{"_index":590,"title":{},"body":{"controllers/UserController.html":{}}}],["metadata",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"modules/ModulesModule.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["method",{"_index":434,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["methods",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["microservice/error.type",{"_index":294,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["microservice/microservice.type",{"_index":292,"title":{},"body":{"classes/BadRequestAlertException.html":{},"classes/GatewayController.html":{}}}],["microserviceconfig",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["microserviceconfig.auth.name",{"_index":473,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["microserviceconfig.auth.patterns.loginbyemailandpassword",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["microserviceconfig.auth.patterns.registerbyemailandpassword",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["microserviceconfig.firestore.name",{"_index":479,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["microserviceconfig.firestore.patterns.createrecord",{"_index":396,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["microserviceerrorcode",{"_index":263,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"injectables/FirestoreService.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["microserviceerrorcode.default",{"_index":268,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["microserviceerrorcode.incorrect_refresh_token",{"_index":637,"title":{},"body":{"injectables/UserService.html":{}}}],["microserviceerrorcode.password_is_incorrect",{"_index":627,"title":{},"body":{"injectables/UserService.html":{}}}],["microserviceresponse",{"_index":102,"title":{"interfaces/MicroserviceResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BaseService.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"coverage.html":{}}}],["microservices/microservices.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["microservicesmodule",{"_index":14,"title":{"modules/MicroservicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MicroservicesModule.html":{},"modules.html":{},"overview.html":{}}}],["middlename",{"_index":572,"title":{},"body":{"classes/User.html":{}}}],["miscellaneous",{"_index":672,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":789,"title":{},"body":{"index.html":{}}}],["mode",{"_index":699,"title":{},"body":{"index.html":{}}}],["model",{"_index":381,"title":{},"body":{"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["modules/auth/auth.type",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["modules/base/base.service",{"_index":312,"title":{},"body":{"modules/CoreModule.html":{}}}],["modules/modules.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.service",{"_index":592,"title":{},"body":{"controllers/UserController.html":{}}}],["modulesmodule",{"_index":15,"title":{"modules/ModulesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":325,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoose.createconnection",{"_index":524,"title":{},"body":{"injectables/MongooseService.html":{}}}],["mongoose.schema(datatype",{"_index":516,"title":{},"body":{"injectables/MongooseService.html":{}}}],["mongoose.types.objectid",{"_index":329,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{}}}],["mongoose/mongoose.service",{"_index":393,"title":{},"body":{"injectables/FirestoreService.html":{},"modules/ModulesModule.html":{}}}],["mongoosemodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/ModulesModule.html":{}}}],["mongoosemodule.forfeature",{"_index":500,"title":{},"body":{"modules/ModulesModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_db_firestore",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_db_metadata",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooseservice",{"_index":382,"title":{"injectables/MongooseService.html":{}},"body":{"injectables/FirestoreService.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"coverage.html":{},"overview.html":{}}}],["more",{"_index":725,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":803,"title":{},"body":{"index.html":{}}}],["name",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":775,"title":{},"body":{"index.html":{}}}],["nest",{"_index":688,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":807,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":340,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["nestjs",{"_index":716,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadRequestAlertException.html":{},"modules/CoreModule.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/ModulesModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/FirestoreService.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"interfaces/ResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{},"classes/BaseService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["next.handle().pipe",{"_index":342,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["node.js",{"_index":680,"title":{},"body":{"index.html":{}}}],["npm",{"_index":693,"title":{},"body":{"index.html":{}}}],["number",{"_index":457,"title":{},"body":{"injectables/HashService.html":{},"injectables/MongooseService.html":{}}}],["object",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{},"classes/BadRequestAlertException.html":{},"injectables/MongooseService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(data",{"_index":530,"title":{},"body":{"injectables/MongooseService.html":{}}}],["observable",{"_index":339,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["offer",{"_index":786,"title":{},"body":{"index.html":{}}}],["official",{"_index":732,"title":{},"body":{"index.html":{}}}],["open",{"_index":791,"title":{},"body":{"index.html":{}}}],["optional",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":475,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":812,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":659,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":358,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["parameters",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":357,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["parseint(process.env.redis_port",{"_index":478,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["part",{"_index":776,"title":{},"body":{"index.html":{}}}],["password",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password_is_incorrect",{"_index":279,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["path",{"_index":445,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["patterns",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["payload.data",{"_index":376,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["payload.email",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["payload.firstname",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["payload.lastname",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["payload.password",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["payload.schemaname",{"_index":375,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["phonenumber",{"_index":573,"title":{},"body":{"classes/User.html":{}}}],["platform",{"_index":730,"title":{},"body":{"index.html":{}}}],["please",{"_index":758,"title":{},"body":{"index.html":{}}}],["port",{"_index":477,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["possible",{"_index":723,"title":{},"body":{"index.html":{}}}],["post",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{}}}],["post(':schemaname",{"_index":355,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["post('log",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"controllers/StorageController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_access_token_expires_in",{"_index":499,"title":{},"body":{"modules/ModulesModule.html":{}}}],["process.env.jwt_secret",{"_index":496,"title":{},"body":{"modules/ModulesModule.html":{}}}],["process.env.redis_host",{"_index":476,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["production",{"_index":703,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":679,"title":{},"body":{"index.html":{}}}],["project",{"_index":538,"title":{"classes/Project.html":{}},"body":{"classes/Project.html":{},"coverage.html":{},"index.html":{}}}],["project/project.service",{"_index":493,"title":{},"body":{"modules/ModulesModule.html":{}}}],["projectdocument",{"_index":544,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["projectschema",{"_index":545,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projectservice",{"_index":484,"title":{"injectables/ProjectService.html":{}},"body":{"modules/ModulesModule.html":{},"injectables/ProjectService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["prop",{"_index":58,"title":{},"body":{"classes/AuditEntity.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"classes/Project.html":{},"interfaces/ResponseDto.html":{},"classes/User.html":{}}}],["prop({default",{"_index":348,"title":{},"body":{"classes/Field.html":{}}}],["prop({type",{"_index":321,"title":{},"body":{"classes/DynamicSchema.html":{}}}],["properties",{"_index":50,"title":{"properties.html":{}},"body":{"classes/AuditEntity.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"classes/Project.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"classes/SuccessMicroserviceResponse.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":417,"title":{},"body":{"modules/GatewayModule.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"overview.html":{}}}],["public",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseService.html":{},"injectables/FirestoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('log",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["questions",{"_index":756,"title":{},"body":{"index.html":{}}}],["read",{"_index":799,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ready",{"_index":714,"title":{},"body":{"index.html":{}}}],["real",{"_index":771,"title":{},"body":{"index.html":{}}}],["record",{"_index":398,"title":{},"body":{"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{}}}],["record.save",{"_index":523,"title":{},"body":{"injectables/MongooseService.html":{}}}],["reflect",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["refresh",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["registerbyemail",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerbyemail(@body",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerbyemail(payload",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerbyemailandpassword",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["registerbyemailandpassword(email",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["registerbyemailandpassword(payload",{"_index":589,"title":{},"body":{"controllers/UserController.html":{}}}],["registerbyemailandpassworddto",{"_index":98,"title":{"interfaces/RegisterByEmailAndPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["registerresponsedto",{"_index":240,"title":{"interfaces/RegisterResponseDto.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"coverage.html":{}}}],["repository",{"_index":690,"title":{},"body":{"index.html":{}}}],["request",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.headers.authorization?.split",{"_index":201,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request[\"user",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{}}}],["required",{"_index":327,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{}}}],["requiring",{"_index":738,"title":{},"body":{"index.html":{}}}],["res",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseService.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"controllers/TestController.html":{}}}],["res.data",{"_index":397,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["res.data?.email",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.data?.username",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.error",{"_index":305,"title":{},"body":{"classes/BaseService.html":{},"classes/GatewayController.html":{}}}],["res.send(\"hello",{"_index":568,"title":{},"body":{"controllers/TestController.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"overview.html":{}}}],["resolve",{"_index":436,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["resources",{"_index":750,"title":{},"body":{"index.html":{}}}],["response",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ResponseInterceptor.html":{}}}],["responsebody",{"_index":443,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["responsedto",{"_index":66,"title":{"interfaces/ResponseDto.html":{}},"body":{"classes/AuditEntity.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["responseinterceptor",{"_index":548,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["results",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadRequestAlertException.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["route",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{}}}],["run",{"_index":695,"title":{},"body":{"index.html":{}}}],["runs",{"_index":721,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/FirestoreService.html":{},"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["saltorrounds",{"_index":449,"title":{},"body":{"injectables/HashService.html":{}}}],["scalable",{"_index":684,"title":{},"body":{"index.html":{}}}],["schema",{"_index":64,"title":{},"body":{"classes/AuditEntity.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"modules/ModulesModule.html":{},"classes/Project.html":{},"interfaces/ResponseDto.html":{},"classes/User.html":{}}}],["schemafactory",{"_index":324,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"classes/Project.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(dynamicschema",{"_index":332,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(project",{"_index":546,"title":{},"body":{"classes/Project.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":583,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemaname",{"_index":316,"title":{},"body":{"interfaces/CreateFirestoreRecord.html":{},"injectables/FirestoreService.html":{},"injectables/MongooseService.html":{}}}],["secret",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"modules/ModulesModule.html":{},"injectables/UserService.html":{}}}],["see",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{}}}],["server",{"_index":685,"title":{},"body":{"index.html":{}}}],["setmetadata(is_public_key",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settimeout",{"_index":567,"title":{},"body":{"controllers/TestController.html":{}}}],["setup",{"_index":691,"title":{},"body":{"index.html":{}}}],["side",{"_index":686,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":497,"title":{},"body":{"modules/ModulesModule.html":{}}}],["simple",{"_index":740,"title":{},"body":{"index.html":{}}}],["situations",{"_index":431,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"modules/CoreModule.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"modules/GatewayModule.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"controllers/StorageController.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":794,"title":{},"body":{"index.html":{}}}],["src/.../error.type.ts",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firestore.type.ts",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":676,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../microservice.config.ts",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../microservice.type.ts",{"_index":674,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../project.type.ts",{"_index":825,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../public.ts",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.type.ts",{"_index":826,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/microservice.config",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"controllers/UserController.html":{}}}],["src/config/microservice.config.ts",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":310,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/decorators/public",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["src/core/decorators/public.ts",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/exceptions/badrequestalertexception.ts",{"_index":286,"title":{},"body":{"classes/BadRequestAlertException.html":{},"coverage.html":{}}}],["src/core/exceptions/badrequestalertexception.ts:11",{"_index":290,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["src/core/exceptions/badrequestalertexception.ts:6",{"_index":289,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["src/core/filter/global.filter.ts",{"_index":420,"title":{},"body":{"classes/GlobalFilter.html":{},"coverage.html":{}}}],["src/core/filter/global.filter.ts:11",{"_index":424,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["src/core/filter/global.filter.ts:14",{"_index":428,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["src/core/gateway/gateway.controller",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FirestoreController.html":{}}}],["src/core/gateway/gateway.controller.ts",{"_index":404,"title":{},"body":{"classes/GatewayController.html":{},"coverage.html":{}}}],["src/core/gateway/gateway.controller.ts:5",{"_index":405,"title":{},"body":{"classes/GatewayController.html":{}}}],["src/core/guards/auth/auth.guard",{"_index":411,"title":{},"body":{"modules/GatewayModule.html":{}}}],["src/core/guards/auth/auth.guard.ts",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/core/guards/auth/auth.guard.ts:15",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/core/guards/auth/auth.guard.ts:22",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/core/guards/auth/auth.guard.ts:54",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/core/hash/hash.service",{"_index":490,"title":{},"body":{"modules/ModulesModule.html":{},"injectables/UserService.html":{}}}],["src/core/hash/hash.service.ts",{"_index":448,"title":{},"body":{"injectables/HashService.html":{},"coverage.html":{}}}],["src/core/hash/hash.service.ts:10",{"_index":453,"title":{},"body":{"injectables/HashService.html":{}}}],["src/core/hash/hash.service.ts:6",{"_index":459,"title":{},"body":{"injectables/HashService.html":{}}}],["src/core/hash/hash.service.ts:7",{"_index":456,"title":{},"body":{"injectables/HashService.html":{}}}],["src/core/interceptors/exception/exception.interceptor.ts",{"_index":334,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/exception/exception.interceptor.ts:11",{"_index":338,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/core/interceptors/response/response.interceptor.ts",{"_index":549,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/response/response.interceptor.ts:12",{"_index":550,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/core/microservice/error.type.ts",{"_index":649,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/microservice/microservice.type",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{},"injectables/UserService.html":{}}}],["src/core/microservice/microservice.type.ts",{"_index":261,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/core/microservice/microservice.type.ts:10",{"_index":264,"title":{},"body":{"classes/BadMicroserviceResponse.html":{}}}],["src/core/microservice/microservice.type.ts:19",{"_index":559,"title":{},"body":{"classes/SuccessMicroserviceResponse.html":{}}}],["src/core/microservice/microservice.type.ts:20",{"_index":560,"title":{},"body":{"classes/SuccessMicroserviceResponse.html":{}}}],["src/core/microservice/microservice.type.ts:21",{"_index":558,"title":{},"body":{"classes/SuccessMicroserviceResponse.html":{}}}],["src/core/microservice/microservice.type.ts:8",{"_index":266,"title":{},"body":{"classes/BadMicroserviceResponse.html":{}}}],["src/core/microservice/microservice.type.ts:9",{"_index":267,"title":{},"body":{"classes/BadMicroserviceResponse.html":{}}}],["src/gateway/auth/auth.controller.ts",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/gateway/auth/auth.controller.ts:18",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/gateway/auth/auth.controller.ts:29",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/gateway/auth/auth.controller.ts:38",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/gateway/firestore/firestore.controller.ts",{"_index":352,"title":{},"body":{"controllers/FirestoreController.html":{},"coverage.html":{}}}],["src/gateway/firestore/firestore.controller.ts:11",{"_index":356,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["src/gateway/gateway.module.ts",{"_index":409,"title":{},"body":{"modules/GatewayModule.html":{}}}],["src/gateway/storage/storage.controller.ts",{"_index":555,"title":{},"body":{"controllers/StorageController.html":{},"coverage.html":{}}}],["src/gateway/test/test.controller.ts",{"_index":561,"title":{},"body":{"controllers/TestController.html":{},"coverage.html":{}}}],["src/gateway/test/test.controller.ts:6",{"_index":564,"title":{},"body":{"controllers/TestController.html":{}}}],["src/main.ts",{"_index":651,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/microservices/firestore/firestore.controller.ts",{"_index":365,"title":{},"body":{"controllers/FirestoreController-1.html":{},"coverage.html":{}}}],["src/microservices/firestore/firestore.controller.ts:11",{"_index":369,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["src/microservices/firestore/firestore.type",{"_index":392,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["src/microservices/firestore/firestore.type.ts",{"_index":315,"title":{},"body":{"interfaces/CreateFirestoreRecord.html":{},"coverage.html":{}}}],["src/microservices/microservices.module.ts",{"_index":467,"title":{},"body":{"modules/MicroservicesModule.html":{}}}],["src/microservices/user/user.controller.ts",{"_index":584,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/microservices/user/user.controller.ts:16",{"_index":591,"title":{},"body":{"controllers/UserController.html":{}}}],["src/microservices/user/user.controller.ts:28",{"_index":586,"title":{},"body":{"controllers/UserController.html":{}}}],["src/microservices/user/user.controller.ts:36",{"_index":588,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:12",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:20",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:44",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:59",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:70",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.type",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/modules/auth/auth.type.ts",{"_index":464,"title":{},"body":{"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"coverage.html":{}}}],["src/modules/base/base.service",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["src/modules/base/base.service.ts",{"_index":301,"title":{},"body":{"classes/BaseService.html":{},"coverage.html":{}}}],["src/modules/base/base.service.ts:5",{"_index":302,"title":{},"body":{"classes/BaseService.html":{}}}],["src/modules/base/base.type",{"_index":552,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/modules/base/base.type.ts",{"_index":48,"title":{},"body":{"classes/AuditEntity.html":{},"interfaces/ResponseDto.html":{},"coverage.html":{}}}],["src/modules/base/base.type.ts:13",{"_index":61,"title":{},"body":{"classes/AuditEntity.html":{}}}],["src/modules/base/base.type.ts:16",{"_index":60,"title":{},"body":{"classes/AuditEntity.html":{}}}],["src/modules/base/base.type.ts:19",{"_index":63,"title":{},"body":{"classes/AuditEntity.html":{}}}],["src/modules/base/base.type.ts:22",{"_index":62,"title":{},"body":{"classes/AuditEntity.html":{}}}],["src/modules/firestore/firestore.service",{"_index":360,"title":{},"body":{"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{}}}],["src/modules/firestore/firestore.service.ts",{"_index":377,"title":{},"body":{"injectables/FirestoreService.html":{},"coverage.html":{}}}],["src/modules/firestore/firestore.service.ts:19",{"_index":383,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["src/modules/firestore/firestore.service.ts:29",{"_index":386,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["src/modules/firestore/firestore.service.ts:46",{"_index":388,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["src/modules/firestore/firestore.service.ts:58",{"_index":390,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["src/modules/firestore/firestore.type.ts",{"_index":318,"title":{},"body":{"classes/DynamicSchema.html":{},"classes/Field.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/firestore/firestore.type.ts:10",{"_index":350,"title":{},"body":{"classes/Field.html":{}}}],["src/modules/firestore/firestore.type.ts:15",{"_index":349,"title":{},"body":{"classes/Field.html":{}}}],["src/modules/firestore/firestore.type.ts:18",{"_index":346,"title":{},"body":{"classes/Field.html":{}}}],["src/modules/firestore/firestore.type.ts:24",{"_index":323,"title":{},"body":{"classes/DynamicSchema.html":{}}}],["src/modules/firestore/firestore.type.ts:29",{"_index":322,"title":{},"body":{"classes/DynamicSchema.html":{}}}],["src/modules/firestore/firestore.type.ts:7",{"_index":347,"title":{},"body":{"classes/Field.html":{}}}],["src/modules/modules.module",{"_index":413,"title":{},"body":{"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{}}}],["src/modules/modules.module.ts",{"_index":485,"title":{},"body":{"modules/ModulesModule.html":{}}}],["src/modules/mongoose/mongoose.service.ts",{"_index":503,"title":{},"body":{"injectables/MongooseService.html":{},"coverage.html":{}}}],["src/modules/mongoose/mongoose.service.ts:14",{"_index":510,"title":{},"body":{"injectables/MongooseService.html":{}}}],["src/modules/mongoose/mongoose.service.ts:26",{"_index":509,"title":{},"body":{"injectables/MongooseService.html":{}}}],["src/modules/mongoose/mongoose.service.ts:32",{"_index":512,"title":{},"body":{"injectables/MongooseService.html":{}}}],["src/modules/mongoose/mongoose.service.ts:8",{"_index":507,"title":{},"body":{"injectables/MongooseService.html":{}}}],["src/modules/project/project.service.ts",{"_index":547,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{}}}],["src/modules/project/project.type.ts",{"_index":539,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/project/project.type.ts:11",{"_index":541,"title":{},"body":{"classes/Project.html":{}}}],["src/modules/project/project.type.ts:8",{"_index":542,"title":{},"body":{"classes/Project.html":{}}}],["src/modules/user/user.service.ts",{"_index":602,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:15",{"_index":606,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:24",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:44",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:75",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.type.ts",{"_index":571,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/user/user.type.ts:11",{"_index":574,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.type.ts:14",{"_index":578,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.type.ts:17",{"_index":579,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.type.ts:20",{"_index":575,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.type.ts:23",{"_index":576,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.type.ts:26",{"_index":577,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.type.ts:29",{"_index":580,"title":{},"body":{"classes/User.html":{}}}],["src/modules/user/user.type.ts:8",{"_index":581,"title":{},"body":{"classes/User.html":{}}}],["start",{"_index":697,"title":{},"body":{"index.html":{}}}],["start:debug",{"_index":702,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":700,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":704,"title":{},"body":{"index.html":{}}}],["started",{"_index":678,"title":{"index.html":{}},"body":{}}],["starter",{"_index":689,"title":{},"body":{"index.html":{}}}],["statements",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":297,"title":{},"body":{"classes/BadRequestAlertException.html":{},"classes/GlobalFilter.html":{}}}],["stay",{"_index":779,"title":{},"body":{"index.html":{}}}],["steps",{"_index":718,"title":{},"body":{"index.html":{}}}],["storage",{"_index":556,"title":{},"body":{"controllers/StorageController.html":{}}}],["storagecontroller",{"_index":554,"title":{"controllers/StorageController.html":{}},"body":{"controllers/StorageController.html":{},"coverage.html":{}}}],["storeschema",{"_index":379,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["storeschema(schemaname",{"_index":389,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["straightforward",{"_index":736,"title":{},"body":{"index.html":{}}}],["string",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditEntity.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadRequestAlertException.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"classes/Field.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"injectables/UserService.html":{}}}],["successmicroserviceresponse",{"_index":270,"title":{"classes/SuccessMicroserviceResponse.html":{}},"body":{"classes/BadMicroserviceResponse.html":{},"injectables/FirestoreService.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["successmicroserviceresponse(record",{"_index":401,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["successmicroserviceresponse(user.tojson",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["super",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{}}}],["super(errorcode",{"_index":295,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["support",{"_index":757,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":810,"title":{},"body":{"modules.html":{}}}],["t",{"_index":265,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["table",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":719,"title":{},"body":{"index.html":{}}}],["target",{"_index":454,"title":{},"body":{"injectables/HashService.html":{}}}],["test",{"_index":562,"title":{},"body":{"controllers/TestController.html":{},"index.html":{}}}],["test(@res",{"_index":566,"title":{},"body":{"controllers/TestController.html":{}}}],["test(res",{"_index":563,"title":{},"body":{"controllers/TestController.html":{}}}],["test/test.controller",{"_index":416,"title":{},"body":{"modules/GatewayModule.html":{}}}],["test:covapi",{"_index":709,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":708,"title":{},"body":{"index.html":{}}}],["testcontroller",{"_index":410,"title":{"controllers/TestController.html":{}},"body":{"modules/GatewayModule.html":{},"controllers/TestController.html":{},"coverage.html":{}}}],["tests",{"_index":705,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":793,"title":{},"body":{"index.html":{}}}],["this.aftercallmicroservice(res",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["this.authservice.loginbyemailandpassword",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginbyrefreshtoken(payload.refreshtoken",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.registerbyemailandpassword",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.client.send",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{}}}],["this.client.send(microserviceconfig.auth.patterns.loginbyrefreshtoken",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.compileloginresponse(res.data",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.configservice.get('jwt_secret",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get('mongo_db_firestore",{"_index":525,"title":{},"body":{"injectables/MongooseService.html":{}}}],["this.createconnection",{"_index":518,"title":{},"body":{"injectables/MongooseService.html":{}}}],["this.data",{"_index":272,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["this.dynamicmodel",{"_index":402,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["this.errorcode",{"_index":269,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{}}}],["this.extracttokenfromheader(request",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.firestoreservice.callcreaterecord(params.schemaname",{"_index":363,"title":{},"body":{"controllers/FirestoreController.html":{}}}],["this.firestoreservice.createrecord",{"_index":374,"title":{},"body":{"controllers/FirestoreController-1.html":{}}}],["this.fromdatatotype(data",{"_index":514,"title":{},"body":{"injectables/MongooseService.html":{}}}],["this.fromdatatotype(data.pop",{"_index":528,"title":{},"body":{"injectables/MongooseService.html":{}}}],["this.fromdatatotype(data[key",{"_index":537,"title":{},"body":{"injectables/MongooseService.html":{}}}],["this.getstatus",{"_index":298,"title":{},"body":{"classes/BadRequestAlertException.html":{}}}],["this.hashservice.compare(password",{"_index":625,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hashservice.hash(password",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["this.httpadapterhost",{"_index":437,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["this.jwtservice.signasync",{"_index":628,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":636,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.mongooseservice.createrecord(schemaname",{"_index":399,"title":{},"body":{"injectables/FirestoreService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.saltorrounds",{"_index":462,"title":{},"body":{"injectables/HashService.html":{}}}],["this.usermodel",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.countdocuments",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyemailandpassword",{"_index":598,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyrefreshtoken(payload.refreshtoken",{"_index":601,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.registerbyemailandpassword",{"_index":595,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"classes/BaseService.html":{},"classes/GatewayController.html":{}}}],["thus",{"_index":435,"title":{},"body":{"classes/GlobalFilter.html":{}}}],["time",{"_index":772,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":67,"title":{},"body":{"classes/AuditEntity.html":{},"classes/GlobalFilter.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{}}}],["token",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":800,"title":{},"body":{"index.html":{}}}],["transport",{"_index":471,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["transport.redis",{"_index":474,"title":{},"body":{"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{}}}],["true",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{},"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"modules/ModulesModule.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/MongooseService.html":{}}}],["twitter",{"_index":806,"title":{},"body":{"index.html":{}}}],["type",{"_index":55,"title":{},"body":{"classes/AuditEntity.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/BaseService.html":{},"interfaces/CreateFirestoreRecord.html":{},"classes/DynamicSchema.html":{},"injectables/ExceptionInterceptor.html":{},"classes/Field.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"injectables/HashService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/MongooseService.html":{},"classes/Project.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"interfaces/ResponseDto.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{},"controllers/TestController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":822,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":526,"title":{},"body":{"injectables/MongooseService.html":{}}}],["typescript",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/BadRequestAlertException.html":{},"classes/DynamicSchema.html":{},"interfaces/MicroserviceResponse.html":{},"injectables/ResponseInterceptor.html":{},"classes/SuccessMicroserviceResponse.html":{},"injectables/UserService.html":{}}}],["unit",{"_index":706,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":820,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ExceptionInterceptor.html":{},"controllers/FirestoreController.html":{},"controllers/FirestoreController-1.html":{},"injectables/FirestoreService.html":{},"classes/GlobalFilter.html":{},"injectables/MongooseService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["updates",{"_index":781,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":418,"title":{},"body":{"modules/GatewayModule.html":{}}}],["user",{"_index":213,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"modules/ModulesModule.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.email",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":501,"title":{},"body":{"modules/ModulesModule.html":{}}}],["user.password",{"_index":626,"title":{},"body":{"injectables/UserService.html":{}}}],["user.refreshtoken",{"_index":633,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["user.tojson",{"_index":634,"title":{},"body":{"injectables/UserService.html":{}}}],["user.type",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["user/user.controller",{"_index":469,"title":{},"body":{"modules/MicroservicesModule.html":{}}}],["user/user.service",{"_index":489,"title":{},"body":{"modules/ModulesModule.html":{}}}],["user/user.type",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"modules/ModulesModule.html":{}}}],["user?.email",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.refreshtoken",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.username",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_not_found",{"_index":281,"title":{},"body":{"classes/BadMicroserviceResponse.html":{},"interfaces/MicroserviceResponse.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{}}}],["usercontroller",{"_index":468,"title":{"controllers/UserController.html":{}},"body":{"modules/MicroservicesModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["userdocument",{"_index":582,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["usermodel",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["username",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"interfaces/LogInByEmailAndPassword.html":{},"interfaces/LogInByRefreshToken.html":{},"interfaces/LogInResponseDto.html":{},"interfaces/RegisterByEmailAndPasswordDto.html":{},"interfaces/RegisterResponseDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["userschema",{"_index":488,"title":{},"body":{"modules/ModulesModule.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":483,"title":{"injectables/UserService.html":{}},"body":{"modules/ModulesModule.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":773,"title":{},"body":{"index.html":{}}}],["v1.auth.log",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v1.auth.register",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v1.firestore.createrecord",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"classes/BadMicroserviceResponse.html":{},"classes/Field.html":{},"injectables/HashService.html":{},"classes/SuccessMicroserviceResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["vanminh.vu",{"_index":821,"title":{},"body":{"properties.html":{}}}],["variable",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":827,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":818,"title":{},"body":{"properties.html":{}}}],["video",{"_index":765,"title":{},"body":{"index.html":{}}}],["visit",{"_index":754,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":768,"title":{},"body":{"index.html":{}}}],["void",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseService.html":{},"controllers/FirestoreController.html":{},"injectables/FirestoreService.html":{},"classes/GatewayController.html":{},"classes/GlobalFilter.html":{},"controllers/TestController.html":{}}}],["watch",{"_index":698,"title":{},"body":{"index.html":{}}}],["we're",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{}}}],["website",{"_index":804,"title":{},"body":{"index.html":{}}}],["working",{"_index":753,"title":{},"body":{"index.html":{}}}],["world",{"_index":569,"title":{},"body":{"controllers/TestController.html":{}}}],["x",{"_index":783,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":797,"title":{},"body":{"index.html":{}}}],["you're",{"_index":713,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GatewayModule.html":{},"modules/MicroservicesModule.html":{},"modules/ModulesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nGatewayModule\n\nGatewayModule\n\nAppModule -->\n\nGatewayModule->AppModule\n\n\n\n\n\nMicroservicesModule\n\nMicroservicesModule\n\nAppModule -->\n\nMicroservicesModule->AppModule\n\n\n\n\n\nModulesModule\n\nModulesModule\n\nAppModule -->\n\nModulesModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CoreModule\n                        \n                        \n                            GatewayModule\n                        \n                        \n                            MicroservicesModule\n                        \n                        \n                            ModulesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CoreModule } from './core/core.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { MicroservicesModule } from './microservices/microservices.module';\nimport { GatewayModule } from './gateway/gateway.module';\nimport { ModulesModule } from './modules/modules.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    MongooseModule.forRoot(process.env.MONGO_DB_METADATA as string, {\n      connectionName: 'metadata',\n    }),\n    MongooseModule.forRoot(process.env.MONGO_DB_FIRESTORE as string, {\n      connectionName: 'firestore',\n    }),\n    CoreModule,\n    MicroservicesModule,\n    GatewayModule,\n    ModulesModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuditEntity.html":{"url":"classes/AuditEntity.html","title":"class - AuditEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuditEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/base/base.type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                lastModifiedAt\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/base/base.type.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/base/base.type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/base/base.type.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/base/base.type.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema } from '@nestjs/mongoose';\n\nexport interface ResponseDto {\n  timestamp?: Date;\n  error?: boolean;\n  errorCode?: any;\n  data?: any;\n}\n\n@Schema()\nexport class AuditEntity {\n  @Prop()\n  createdBy: string;\n\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  lastModifiedBy: string;\n\n  @Prop()\n  lastModifiedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gateway/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                logInByEmailAndPassword\n                            \n                            \n                                    \n                                    \n                                logInByRefreshToken\n                            \n                            \n                                    \n                                    \n                                registerByEmail\n                            \n                            \n                                afterCallMicroservice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logInByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    logInByEmailAndPassword(payload: LogInByEmailAndPassword)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('log-in-by-email-and-password')\n                \n            \n\n                    \n                        \n                            Defined in src/gateway/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LogInByEmailAndPassword\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logInByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    logInByRefreshToken(payload: LogInByRefreshToken)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('log-in-by-refresh-token')\n                \n            \n\n                    \n                        \n                            Defined in src/gateway/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LogInByRefreshToken\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registerByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerByEmail(payload: RegisterByEmailAndPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register-by-email-and-password')\n                \n            \n\n                    \n                        \n                            Defined in src/gateway/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            RegisterByEmailAndPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        afterCallMicroservice\n                        \n                    \n                \n            \n            \n                \nafterCallMicroservice(res: MicroserviceResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         GatewayController\n\n                        \n                    \n                    \n                        \n                                Defined in         GatewayController:5\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            MicroserviceResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport {\n  LogInByEmailAndPassword,\n  LogInByRefreshToken,\n  RegisterByEmailAndPasswordDto,\n} from '../../modules/auth/auth.type';\nimport { GatewayController } from 'src/core/gateway/gateway.controller';\nimport { AuthService } from '../../modules/auth/auth.service';\nimport { Public } from 'src/core/decorators/public';\n\n@Controller('auth')\nexport class AuthController extends GatewayController {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n  @Public()\n  @Post('register-by-email-and-password')\n  registerByEmail(@Body() payload: RegisterByEmailAndPasswordDto) {\n    return this.authService.registerByEmailAndPassword(\n      payload.email,\n      payload.password,\n      payload.firstName,\n      payload.lastName\n    );\n  }\n\n  @Public()\n  @Post('log-in-by-email-and-password')\n  logInByEmailAndPassword(@Body() payload: LogInByEmailAndPassword) {\n    return this.authService.logInByEmailAndPassword(\n      payload.email,\n      payload.password,\n    );\n  }\n\n  @Public()\n  @Post('log-in-by-refresh-token')\n  logInByRefreshToken(@Body() payload: LogInByRefreshToken){\n    return this.authService.logInByRefreshToken(payload.refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/guards/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/guards/auth/auth.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/guards/auth/auth.guard.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/guards/auth/auth.guard.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Reflector } from \"@nestjs/core\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { Request } from \"express\";\nimport { IS_PUBLIC_KEY } from \"src/core/decorators/public\";\nimport { JWTPayload } from \"src/modules/auth/auth.type\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      // 💡 See this condition\n      return true;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const request = context.switchToHttp().getRequest();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const payload: JWTPayload = await this.jwtService.verifyAsync(token, {\n        secret: this.configService.get(\"JWT_SECRET\"),\n      });\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      request[\"user\"] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(\" \") ?? [];\n    return type === \"Bearer\" ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compileLogInResponse\n                            \n                            \n                                    Async\n                                logInByEmailAndPassword\n                            \n                            \n                                    Async\n                                logInByRefreshToken\n                            \n                            \n                                    Async\n                                registerByEmailAndPassword\n                            \n                            \n                                    Public\n                                afterCallMicroservice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ClientRedis, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientRedis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compileLogInResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    compileLogInResponse(user: User | undefined, ignoreRefreshToken: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ignoreRefreshToken\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logInByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    logInByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logInByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    logInByRefreshToken(refreshToken)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registerByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerByEmailAndPassword(email: string, password: string, firstName: string, lastName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                firstName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                lastName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        afterCallMicroservice\n                        \n                    \n                \n            \n            \n                \n                        \n                    afterCallMicroservice(res: MicroserviceResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:5\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            MicroserviceResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ClientRedis } from '@nestjs/microservices';\nimport { microserviceConfig } from 'src/config/microservice.config';\nimport { MicroserviceResponse } from 'src/core/microservice/microservice.type';\nimport { User } from '../user/user.type';\nimport { firstValueFrom } from 'rxjs';\nimport { BaseService } from 'src/modules/base/base.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { JWTPayload, LogInResponseDto, RegisterResponseDto } from './auth.type';\n\n@Injectable()\nexport class AuthService extends BaseService {\n  constructor(\n    @Inject(microserviceConfig.auth.name) private readonly client: ClientRedis,\n    private readonly jwtService: JwtService,\n  ) {\n    super();\n  }\n\n  async registerByEmailAndPassword(\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n  ): Promise {\n    const res: MicroserviceResponse = await firstValueFrom(\n      this.client.send(\n        microserviceConfig.auth.patterns.registerByEmailAndPassword,\n        {\n          email: email,\n          password: password,\n          firstName: firstName,\n          lastName: lastName,\n        },\n      ),\n    );\n    this.afterCallMicroservice(res);\n    return {\n      username: res.data?.username,\n      email: res.data?.email,\n    };\n  }\n\n  async logInByEmailAndPassword(\n    email: string,\n    password: string,\n  ): Promise {\n    const res: MicroserviceResponse = await firstValueFrom(\n      this.client.send(\n        microserviceConfig.auth.patterns.logInByEmailAndPassword,\n        { email: email, password: password },\n      ),\n    );\n\n    this.afterCallMicroservice(res);\n    return await this.compileLogInResponse(res.data);\n  }\n\n  async logInByRefreshToken(refreshToken) {\n    const res: MicroserviceResponse = await firstValueFrom(\n      this.client.send(microserviceConfig.auth.patterns.logInByRefreshToken, {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        refreshToken: refreshToken,\n      }),\n    );\n    this.afterCallMicroservice(res);\n    return await this.compileLogInResponse(res.data, false);\n  }\n\n  async compileLogInResponse(\n    user: User | undefined,\n    ignoreRefreshToken: boolean = false,\n  ): Promise {\n    const payload: JWTPayload = {\n      sub: user?.username,\n      username: user?.username,\n      email: user?.email,\n    };\n    const accessToken = await this.jwtService.signAsync(payload);\n    const response: LogInResponseDto = {\n      accessToken: accessToken,\n      refreshToken: ignoreRefreshToken ? undefined : user?.refreshToken,\n      metadata: {\n        ...user,\n        refreshToken: undefined, //ignore refreshToken\n      },\n    };\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadMicroserviceResponse.html":{"url":"classes/BadMicroserviceResponse.html","title":"class - BadMicroserviceResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadMicroserviceResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/microservice/microservice.type.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            MicroserviceResponse\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                data\n                            \n                            \n                                error\n                            \n                            \n                                errorCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorCode: MicroserviceErrorCode)\n                    \n                \n                        \n                            \n                                Defined in src/core/microservice/microservice.type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errorCode\n                                                  \n                                                        \n                                                                        MicroserviceErrorCode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/core/microservice/microservice.type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/core/microservice/microservice.type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MicroserviceErrorCode\n\n                    \n                \n                    \n                        \n                                Defined in src/core/microservice/microservice.type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export interface MicroserviceResponse {\n  error: boolean;\n  errorCode: MicroserviceErrorCode;\n  data?: T;\n}\n\nexport class BadMicroserviceResponse implements MicroserviceResponse {\n  error: boolean = true;\n  errorCode: MicroserviceErrorCode;\n  data?: T | undefined;\n  constructor(\n    errorCode: MicroserviceErrorCode = MicroserviceErrorCode.DEFAULT,\n  ) {\n    this.errorCode = errorCode;\n  }\n}\n\nexport class SuccessMicroserviceResponse implements MicroserviceResponse {\n  error: boolean = false;\n  errorCode: MicroserviceErrorCode = MicroserviceErrorCode.DEFAULT;\n  data: T;\n  constructor(data: T) {\n    this.data = data;\n  }\n}\nexport enum MicroserviceErrorCode {\n  DEFAULT = \"00x0000\",\n  DUPLICATE_EMAIL = \"01x0001\",\n  EMAIL_NOT_FOUND = \"01x0002\",\n  PASSWORD_IS_INCORRECT = \"01x0003\",\n  USER_NOT_FOUND = \"01x0004\",\n  INCORRECT_REFRESH_TOKEN = \"01x0005\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestAlertException.html":{"url":"classes/BadRequestAlertException.html","title":"class - BadRequestAlertException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestAlertException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/exceptions/BadRequestAlertException.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorCode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorCode: MicroserviceErrorCode)\n                    \n                \n                        \n                            \n                                Defined in src/core/exceptions/BadRequestAlertException.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errorCode\n                                                  \n                                                        \n                                                                        MicroserviceErrorCode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MicroserviceErrorCode\n\n                    \n                \n                    \n                        \n                                Defined in src/core/exceptions/BadRequestAlertException.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/exceptions/BadRequestAlertException.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string | object\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport { MicroserviceErrorCode } from '../microservice/microservice.type';\nimport ErrorMessage from '../microservice/error.type';\n\nexport class BadRequestAlertException extends HttpException {\n  errorCode!: MicroserviceErrorCode;\n  constructor(errorCode: MicroserviceErrorCode) {\n    super(errorCode as string, HttpStatus.BAD_REQUEST);\n    this.errorCode = errorCode;\n  }\n  getResponse(): string | object {\n    return {\n      statusCode: this.getStatus(),\n      errorCode: this.errorCode,\n      message: (ErrorMessage[this.errorCode] as string) ?? 'undefined message',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseService.html":{"url":"classes/BaseService.html","title":"class - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/base/base.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                afterCallMicroservice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        afterCallMicroservice\n                        \n                    \n                \n            \n            \n                \n                        \n                    afterCallMicroservice(res: MicroserviceResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/base/base.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            MicroserviceResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MicroserviceResponse } from '../../core/microservice/microservice.type';\nimport { BadRequestAlertException } from '../../core/exceptions/BadRequestAlertException';\n\nexport class BaseService {\n  public afterCallMicroservice(res: MicroserviceResponse) {\n    if (res.error) {\n      throw new BadRequestAlertException(res.errorCode);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nHashService\n\nHashService\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nHashService->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HashService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HashService } from './hash/hash.service';\nimport { BaseService } from '../modules/base/base.service';\n\n@Module({\n  imports: [],\n  providers: [HashService, BaseService],\n  controllers: [],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateFirestoreRecord.html":{"url":"interfaces/CreateFirestoreRecord.html","title":"interface - CreateFirestoreRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateFirestoreRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/microservices/firestore/firestore.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            schemaName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        schemaName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schemaName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CreateFirestoreRecord {\n  schemaName?: string;\n  data?: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicSchema.html":{"url":"classes/DynamicSchema.html","title":"class - DynamicSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/firestore/firestore.type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                fields\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Field[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/firestore/firestore.type.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/firestore/firestore.type.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\n\n@Schema()\nexport class Field {\n  @Prop()\n  name: string;\n\n  @Prop()\n  type: string;\n\n  @Prop({\n    default: false,\n  })\n  required?: boolean = false;\n\n  @Prop()\n  defaultValue?: string;\n}\n\n@Schema()\nexport class DynamicSchema {\n  @Prop()\n  name: string;\n\n  @Prop({\n    type: [mongoose.Types.ObjectId],\n  })\n  fields?: Field[];\n}\n\nexport type DynamicSchemaDocument = HydratedDocument;\n\nexport const DynamicSchemaSchema = SchemaFactory.createForClass(DynamicSchema);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/exception/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/exception/exception.interceptor.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\n\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((e) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        e['time'] = new Date();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return e;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/firestore/firestore.type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                defaultValue\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                required\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/firestore/firestore.type.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/firestore/firestore.type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/firestore/firestore.type.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/firestore/firestore.type.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\n\n@Schema()\nexport class Field {\n  @Prop()\n  name: string;\n\n  @Prop()\n  type: string;\n\n  @Prop({\n    default: false,\n  })\n  required?: boolean = false;\n\n  @Prop()\n  defaultValue?: string;\n}\n\n@Schema()\nexport class DynamicSchema {\n  @Prop()\n  name: string;\n\n  @Prop({\n    type: [mongoose.Types.ObjectId],\n  })\n  fields?: Field[];\n}\n\nexport type DynamicSchemaDocument = HydratedDocument;\n\nexport const DynamicSchemaSchema = SchemaFactory.createForClass(DynamicSchema);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FirestoreController.html":{"url":"controllers/FirestoreController.html","title":"controller - FirestoreController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FirestoreController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gateway/firestore/firestore.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                firestore\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                afterCallMicroservice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(params: any, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':schemaName')\n                \n            \n\n                    \n                        \n                            Defined in src/gateway/firestore/firestore.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        afterCallMicroservice\n                        \n                    \n                \n            \n            \n                \nafterCallMicroservice(res: MicroserviceResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         GatewayController\n\n                        \n                    \n                    \n                        \n                                Defined in         GatewayController:5\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            MicroserviceResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Post } from '@nestjs/common';\nimport { GatewayController } from 'src/core/gateway/gateway.controller';\nimport { FirestoreService } from 'src/modules/firestore/firestore.service';\n\n@Controller('firestore')\nexport class FirestoreController extends GatewayController {\n  constructor(private readonly firestoreService: FirestoreService) {\n    super();\n  }\n  @Post(':schemaName')\n  create(@Param() params: any, @Body() data: any) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n    return this.firestoreService.callCreateRecord(params.schemaName, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FirestoreController-1.html":{"url":"controllers/FirestoreController-1.html","title":"controller - FirestoreController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FirestoreController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/microservices/firestore/firestore.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                firestore\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createRecord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRecord(payload: CreateFirestoreRecord)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern(undefined.createRecord)\n                \n            \n\n                    \n                        \n                            Defined in src/microservices/firestore/firestore.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            CreateFirestoreRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { MessagePattern, Payload } from '@nestjs/microservices';\nimport { CreateFirestoreRecord } from './firestore.type';\nimport { microserviceConfig } from 'src/config/microservice.config';\nimport { FirestoreService } from 'src/modules/firestore/firestore.service';\n\n@Controller('firestore')\nexport class FirestoreController {\n  constructor(private readonly firestoreService: FirestoreService) {}\n  @MessagePattern(microserviceConfig.firestore.patterns.createRecord)\n  createRecord(@Payload() payload: CreateFirestoreRecord) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.firestoreService.createRecord(\n      payload.schemaName as string,\n      payload.data,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirestoreService.html":{"url":"injectables/FirestoreService.html","title":"injectable - FirestoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirestoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/firestore/firestore.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                callCreateRecord\n                            \n                            \n                                    Async\n                                createRecord\n                            \n                            \n                                    Async\n                                storeSchema\n                            \n                            \n                                    Public\n                                afterCallMicroservice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dynamicModel: Model, client: ClientRedis, mongooseService: MongooseService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/firestore/firestore.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dynamicModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    ClientRedis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mongooseService\n                                                  \n                                                        \n                                                                        MongooseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callCreateRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    callCreateRecord(schemaName: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/firestore/firestore.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schemaName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRecord(schemaName: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/firestore/firestore.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schemaName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeSchema(schemaName: string, fields: Field[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/firestore/firestore.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schemaName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fields\n                                            \n                                                            Field[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        afterCallMicroservice\n                        \n                    \n                \n            \n            \n                \n                        \n                    afterCallMicroservice(res: MicroserviceResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:5\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            MicroserviceResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { DynamicSchema, Field } from './firestore.type';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { BaseService } from 'src/modules/base/base.service';\nimport { microserviceConfig } from 'src/config/microservice.config';\nimport { ClientRedis } from '@nestjs/microservices';\nimport {\n  BadMicroserviceResponse,\n  MicroserviceErrorCode,\n  MicroserviceResponse,\n  SuccessMicroserviceResponse,\n} from 'src/core/microservice/microservice.type';\nimport { firstValueFrom } from 'rxjs';\nimport { CreateFirestoreRecord } from 'src/microservices/firestore/firestore.type';\nimport { MongooseService } from '../mongoose/mongoose.service';\n\n@Injectable()\nexport class FirestoreService extends BaseService {\n  constructor(\n    @InjectModel(DynamicSchema.name, 'firestore')\n    private readonly dynamicModel: Model,\n    @Inject(microserviceConfig.firestore.name)\n    private readonly client: ClientRedis,\n    private readonly mongooseService: MongooseService,\n  ) {\n    super();\n  }\n  async callCreateRecord(schemaName: string, data: any) {\n    const payload: CreateFirestoreRecord = {\n      schemaName: schemaName,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      data: data,\n    };\n    const res: MicroserviceResponse = await firstValueFrom(\n      this.client.send(\n        microserviceConfig.firestore.patterns.createRecord,\n        payload,\n      ),\n    );\n    this.afterCallMicroservice(res);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return res.data;\n  }\n\n  async createRecord(\n    schemaName: string,\n    data: any,\n  ): Promise> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-assignment\n    const record = await this.mongooseService.createRecord(schemaName, data);\n    if (!record) {\n      return new BadMicroserviceResponse(MicroserviceErrorCode.DEFAULT);\n    }\n    return new SuccessMicroserviceResponse(record);\n  }\n\n  async storeSchema(schemaName: string, fields: Field[]) {\n    let dynamicSchema = new this.dynamicModel({\n      name: schemaName,\n      fields: fields,\n    });\n    dynamicSchema = await dynamicSchema.save();\n    return dynamicSchema;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GatewayController.html":{"url":"classes/GatewayController.html","title":"class - GatewayController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GatewayController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/gateway/gateway.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterCallMicroservice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        afterCallMicroservice\n                        \n                    \n                \n            \n            \n                \nafterCallMicroservice(res: MicroserviceResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/gateway/gateway.controller.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            MicroserviceResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestAlertException } from '../exceptions/BadRequestAlertException';\nimport { MicroserviceResponse } from '../microservice/microservice.type';\n\nexport class GatewayController {\n  afterCallMicroservice(res: MicroserviceResponse) {\n    if (res.error) {\n      throw new BadRequestAlertException(res.errorCode);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GatewayModule.html":{"url":"modules/GatewayModule.html","title":"module - GatewayModule","body":"\n                   \n\n\n\n\n    Modules\n    GatewayModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GatewayModule\n\n\n\ncluster_GatewayModule_imports\n\n\n\n\nModulesModule\n\nModulesModule\n\n\n\nGatewayModule\n\nGatewayModule\n\nGatewayModule -->\n\nModulesModule->GatewayModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/gateway/gateway.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            FirestoreController\n                        \n                        \n                            TestController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ModulesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from 'src/core/guards/auth/auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { ModulesModule } from 'src/modules/modules.module';\nimport { AuthController } from './auth/auth.controller';\nimport { FirestoreController } from './firestore/firestore.controller';\nimport { TestController } from './test/test.controller';\n\n@Module({\n  imports: [ConfigModule.forRoot(), ModulesModule],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n  ],\n  controllers: [AuthController, FirestoreController, TestController],\n})\nexport class GatewayModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalFilter.html":{"url":"classes/GlobalFilter.html","title":"class - GlobalFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filter/global.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost)\n                    \n                \n                        \n                            \n                                Defined in src/core/filter/global.filter.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/filter/global.filter.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\n\n@Catch()\nexport class GlobalFilter implements ExceptionFilter {\n  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\n  catch(exception: unknown, host: ArgumentsHost): void {\n    // In certain situations `httpAdapter` might not be available in the\n    // constructor method, thus we should resolve it here.\n    const { httpAdapter } = this.httpAdapterHost;\n\n    const ctx = host.switchToHttp();\n\n    const httpStatus =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const responseBody = {\n      statusCode: httpStatus,\n      timestamp: new Date().toISOString(),\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      path: httpAdapter.getRequestUrl(ctx.getRequest()),\n    };\n\n    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashService.html":{"url":"injectables/HashService.html","title":"injectable - HashService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/hash/hash.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saltOrRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compare\n                            \n                            \n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(target: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/hash/hash.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n            \n                \nhash(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/hash/hash.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        saltOrRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/core/hash/hash.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class HashService {\n  saltOrRounds = 10;\n  hash(value: string) {\n    return bcrypt.hashSync(value, this.saltOrRounds);\n  }\n  compare(target: string, hash: string) {\n    return bcrypt.compareSync(target, hash);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTPayload.html":{"url":"interfaces/JWTPayload.html","title":"interface - JWTPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JWTPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sub\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterByEmailAndPasswordDto {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface LogInByEmailAndPassword {\n  email: string;\n  password: string;\n}\n\nexport interface LogInByRefreshToken {\n  refreshToken: string;\n}\n\nexport interface JWTPayload {\n  sub?: string;\n  username?: string;\n  email?: string;\n}\n\nexport interface LogInResponseDto {\n  accessToken?: string;\n  refreshToken?: string;\n  metadata?: any;\n}\n\nexport interface RegisterResponseDto {\n  username?: string;\n  email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogInByEmailAndPassword.html":{"url":"interfaces/LogInByEmailAndPassword.html","title":"interface - LogInByEmailAndPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogInByEmailAndPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterByEmailAndPasswordDto {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface LogInByEmailAndPassword {\n  email: string;\n  password: string;\n}\n\nexport interface LogInByRefreshToken {\n  refreshToken: string;\n}\n\nexport interface JWTPayload {\n  sub?: string;\n  username?: string;\n  email?: string;\n}\n\nexport interface LogInResponseDto {\n  accessToken?: string;\n  refreshToken?: string;\n  metadata?: any;\n}\n\nexport interface RegisterResponseDto {\n  username?: string;\n  email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogInByRefreshToken.html":{"url":"interfaces/LogInByRefreshToken.html","title":"interface - LogInByRefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogInByRefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterByEmailAndPasswordDto {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface LogInByEmailAndPassword {\n  email: string;\n  password: string;\n}\n\nexport interface LogInByRefreshToken {\n  refreshToken: string;\n}\n\nexport interface JWTPayload {\n  sub?: string;\n  username?: string;\n  email?: string;\n}\n\nexport interface LogInResponseDto {\n  accessToken?: string;\n  refreshToken?: string;\n  metadata?: any;\n}\n\nexport interface RegisterResponseDto {\n  username?: string;\n  email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogInResponseDto.html":{"url":"interfaces/LogInResponseDto.html","title":"interface - LogInResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogInResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterByEmailAndPasswordDto {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface LogInByEmailAndPassword {\n  email: string;\n  password: string;\n}\n\nexport interface LogInByRefreshToken {\n  refreshToken: string;\n}\n\nexport interface JWTPayload {\n  sub?: string;\n  username?: string;\n  email?: string;\n}\n\nexport interface LogInResponseDto {\n  accessToken?: string;\n  refreshToken?: string;\n  metadata?: any;\n}\n\nexport interface RegisterResponseDto {\n  username?: string;\n  email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MicroserviceResponse.html":{"url":"interfaces/MicroserviceResponse.html","title":"interface - MicroserviceResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MicroserviceResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/microservice/microservice.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            errorCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         MicroserviceErrorCode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MicroserviceErrorCode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MicroserviceResponse {\n  error: boolean;\n  errorCode: MicroserviceErrorCode;\n  data?: T;\n}\n\nexport class BadMicroserviceResponse implements MicroserviceResponse {\n  error: boolean = true;\n  errorCode: MicroserviceErrorCode;\n  data?: T | undefined;\n  constructor(\n    errorCode: MicroserviceErrorCode = MicroserviceErrorCode.DEFAULT,\n  ) {\n    this.errorCode = errorCode;\n  }\n}\n\nexport class SuccessMicroserviceResponse implements MicroserviceResponse {\n  error: boolean = false;\n  errorCode: MicroserviceErrorCode = MicroserviceErrorCode.DEFAULT;\n  data: T;\n  constructor(data: T) {\n    this.data = data;\n  }\n}\nexport enum MicroserviceErrorCode {\n  DEFAULT = \"00x0000\",\n  DUPLICATE_EMAIL = \"01x0001\",\n  EMAIL_NOT_FOUND = \"01x0002\",\n  PASSWORD_IS_INCORRECT = \"01x0003\",\n  USER_NOT_FOUND = \"01x0004\",\n  INCORRECT_REFRESH_TOKEN = \"01x0005\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MicroservicesModule.html":{"url":"modules/MicroservicesModule.html","title":"module - MicroservicesModule","body":"\n                   \n\n\n\n\n    Modules\n    MicroservicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MicroservicesModule\n\n\n\ncluster_MicroservicesModule_imports\n\n\n\n\nModulesModule\n\nModulesModule\n\n\n\nMicroservicesModule\n\nMicroservicesModule\n\nMicroservicesModule -->\n\nModulesModule->MicroservicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/microservices/microservices.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            FirestoreController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ModulesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user/user.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { microserviceConfig } from 'src/config/microservice.config';\nimport { ModulesModule } from 'src/modules/modules.module';\nimport { FirestoreController } from './firestore/firestore.controller';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ClientsModule.register([\n      {\n        name: microserviceConfig.auth.name,\n        transport: Transport.REDIS,\n        options: {\n          host: process.env.REDIS_HOST as string,\n          port: parseInt(process.env.REDIS_PORT as string),\n        },\n      },\n      {\n        name: microserviceConfig.firestore.name,\n        transport: Transport.REDIS,\n        options: {\n          host: process.env.REDIS_HOST as string,\n          port: parseInt(process.env.REDIS_PORT as string),\n        },\n      },\n    ]),\n    ModulesModule,\n  ],\n  controllers: [UserController, FirestoreController],\n  providers: [],\n})\nexport class MicroservicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModulesModule.html":{"url":"modules/ModulesModule.html","title":"module - ModulesModule","body":"\n                   \n\n\n\n\n    Modules\n    ModulesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ModulesModule\n\n\n\ncluster_ModulesModule_providers\n\n\n\ncluster_ModulesModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nFirestoreService \n\nFirestoreService \n\n\n\nUserService \n\nUserService \n\n\n\nModulesModule\n\nModulesModule\n\nAuthService  -->\n\nModulesModule->AuthService \n\n\n\nFirestoreService  -->\n\nModulesModule->FirestoreService \n\n\n\nUserService  -->\n\nModulesModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nModulesModule -->\n\nAuthService->ModulesModule\n\n\n\n\n\nFirestoreService\n\nFirestoreService\n\nModulesModule -->\n\nFirestoreService->ModulesModule\n\n\n\n\n\nHashService\n\nHashService\n\nModulesModule -->\n\nHashService->ModulesModule\n\n\n\n\n\nMongooseService\n\nMongooseService\n\nModulesModule -->\n\nMongooseService->ModulesModule\n\n\n\n\n\nProjectService\n\nProjectService\n\nModulesModule -->\n\nProjectService->ModulesModule\n\n\n\n\n\nUserService\n\nUserService\n\nModulesModule -->\n\nUserService->ModulesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/modules.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FirestoreService\n                        \n                        \n                            HashService\n                        \n                        \n                            MongooseService\n                        \n                        \n                            ProjectService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            FirestoreService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { microserviceConfig } from 'src/config/microservice.config';\nimport { AuthService } from './auth/auth.service';\nimport { User, UserSchema } from './user/user.type';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserService } from './user/user.service';\nimport { HashService } from 'src/core/hash/hash.service';\nimport { MongooseService } from './mongoose/mongoose.service';\nimport { FirestoreService } from './firestore/firestore.service';\nimport { DynamicSchema, DynamicSchemaSchema } from './firestore/firestore.type';\nimport { ProjectService } from './project/project.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    JwtModule.register({\n      global: true,\n      secret: process.env.JWT_SECRET,\n      signOptions: {\n        expiresIn: process.env.JWT_ACCESS_TOKEN_EXPIRES_IN,\n      },\n    }),\n    ClientsModule.register([\n      {\n        name: microserviceConfig.auth.name,\n        transport: Transport.REDIS,\n        options: {\n          host: process.env.REDIS_HOST,\n          port: parseInt(process.env.REDIS_PORT as string),\n        },\n      },\n      {\n        name: microserviceConfig.firestore.name,\n        transport: Transport.REDIS,\n        options: {\n          host: process.env.REDIS_HOST as string,\n          port: parseInt(process.env.REDIS_PORT as string),\n        },\n      },\n    ]),\n    MongooseModule.forFeature(\n      [{ name: User.name, schema: UserSchema }],\n      'metadata',\n    ),\n    MongooseModule.forFeature(\n      [{ name: DynamicSchema.name, schema: DynamicSchemaSchema }],\n      'firestore',\n    ),\n  ],\n  providers: [\n    AuthService,\n    UserService,\n    HashService,\n    MongooseService,\n    FirestoreService,\n    ProjectService,\n  ],\n  exports: [AuthService, UserService, FirestoreService],\n})\nexport class ModulesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongooseService.html":{"url":"injectables/MongooseService.html","title":"injectable - MongooseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongooseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/mongoose/mongoose.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createConnection\n                            \n                            \n                                    Async\n                                createRecord\n                            \n                            \n                                fromDataToType\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dynamicSchemaModel: Model, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/mongoose/mongoose.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dynamicSchemaModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createConnection\n                        \n                    \n                \n            \n            \n                \ncreateConnection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/mongoose/mongoose.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRecord(schemaName: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/mongoose/mongoose.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schemaName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromDataToType\n                        \n                    \n                \n            \n            \n                \nfromDataToType(data: object)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/mongoose/mongoose.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { DynamicSchema } from '../firestore/firestore.type';\nimport mongoose, { Model } from 'mongoose';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class MongooseService {\n  constructor(\n    @InjectModel(DynamicSchema.name, 'firestore')\n    private readonly dynamicSchemaModel: Model,\n    private readonly configService: ConfigService,\n  ) {}\n  async createRecord(schemaName: string, data: any) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument\n    const dataType = this.fromDataToType(data);\n    const _Schema = new mongoose.Schema(dataType);\n    const conn = this.createConnection();\n    const _Model = conn.model(schemaName, _Schema);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const record = new _Model(data);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    return await record.save();\n  }\n\n  createConnection() {\n    return mongoose.createConnection(\n      this.configService.get('MONGO_DB_FIRESTORE') as string,\n    );\n  }\n\n  fromDataToType(data: object) {\n    if (typeof data !== 'object') {\n      return false;\n    }\n    if (data instanceof Array) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-argument\n      return this.fromDataToType(data.pop());\n    }\n    const dataType = {};\n    for (const key of Object.keys(data)) {\n      if (typeof data[key] === 'string') {\n        dataType[key] = {\n          type: String,\n        };\n        try {\n          const date = Date.parse(`${data[key]}`);\n          if (!isNaN(date)) {\n            dataType[key] = {\n              type: Date,\n            };\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      } else if (typeof data[key] === 'number') {\n        dataType[key] = {\n          type: Number,\n        };\n      } else if (typeof data[key] === 'bigint') {\n        dataType[key] = {\n          type: BigInt,\n        };\n      } else if (typeof data[key] === 'boolean') {\n        dataType[key] = {\n          type: Boolean,\n        };\n      } else if (typeof data[key] === 'object') {\n        if (data[key] instanceof Array) {\n          dataType[key] = {\n            type: Array,\n          };\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          dataType[key] = this.fromDataToType(data[key] as object);\n        }\n      }\n    }\n    return dataType;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Project.html":{"url":"classes/Project.html","title":"class - Project","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Project\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/project/project.type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/project/project.type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/project/project.type.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { AuditEntity } from '../base/base.type';\n\n@Schema()\nexport class Project extends AuditEntity {\n  @Prop()\n  name: string;\n\n  @Prop()\n  description?: string;\n}\n\nexport type ProjectDocument = HydratedDocument;\n\nexport const projectSchema = SchemaFactory.createForClass(Project);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/project/project.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ProjectService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterByEmailAndPasswordDto.html":{"url":"interfaces/RegisterByEmailAndPasswordDto.html","title":"interface - RegisterByEmailAndPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterByEmailAndPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterByEmailAndPasswordDto {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface LogInByEmailAndPassword {\n  email: string;\n  password: string;\n}\n\nexport interface LogInByRefreshToken {\n  refreshToken: string;\n}\n\nexport interface JWTPayload {\n  sub?: string;\n  username?: string;\n  email?: string;\n}\n\nexport interface LogInResponseDto {\n  accessToken?: string;\n  refreshToken?: string;\n  metadata?: any;\n}\n\nexport interface RegisterResponseDto {\n  username?: string;\n  email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterResponseDto.html":{"url":"interfaces/RegisterResponseDto.html","title":"interface - RegisterResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterByEmailAndPasswordDto {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface LogInByEmailAndPassword {\n  email: string;\n  password: string;\n}\n\nexport interface LogInByRefreshToken {\n  refreshToken: string;\n}\n\nexport interface JWTPayload {\n  sub?: string;\n  username?: string;\n  email?: string;\n}\n\nexport interface LogInResponseDto {\n  accessToken?: string;\n  refreshToken?: string;\n  metadata?: any;\n}\n\nexport interface RegisterResponseDto {\n  username?: string;\n  email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseDto.html":{"url":"interfaces/ResponseDto.html","title":"interface - ResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/base/base.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prop, Schema } from '@nestjs/mongoose';\n\nexport interface ResponseDto {\n  timestamp?: Date;\n  error?: boolean;\n  errorCode?: any;\n  data?: any;\n}\n\n@Schema()\nexport class AuditEntity {\n  @Prop()\n  createdBy: string;\n\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  lastModifiedBy: string;\n\n  @Prop()\n  lastModifiedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/response/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/response/response.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { map, Observable } from 'rxjs';\nimport { ResponseDto } from 'src/modules/base/base.type';\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        const response: ResponseDto = {\n          timestamp: new Date(),\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          data: data,\n          error: false,\n          errorCode: undefined,\n        };\n        return response;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StorageController.html":{"url":"controllers/StorageController.html","title":"controller - StorageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StorageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gateway/storage/storage.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                storage\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('storage')\nexport class StorageController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SuccessMicroserviceResponse.html":{"url":"classes/SuccessMicroserviceResponse.html","title":"class - SuccessMicroserviceResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SuccessMicroserviceResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/microservice/microservice.type.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            MicroserviceResponse\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                error\n                            \n                            \n                                errorCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T)\n                    \n                \n                        \n                            \n                                Defined in src/core/microservice/microservice.type.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/core/microservice/microservice.type.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/core/microservice/microservice.type.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MicroserviceErrorCode\n\n                    \n                \n                \n                    \n                        Default value : MicroserviceErrorCode.DEFAULT\n                    \n                \n                    \n                        \n                                Defined in src/core/microservice/microservice.type.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export interface MicroserviceResponse {\n  error: boolean;\n  errorCode: MicroserviceErrorCode;\n  data?: T;\n}\n\nexport class BadMicroserviceResponse implements MicroserviceResponse {\n  error: boolean = true;\n  errorCode: MicroserviceErrorCode;\n  data?: T | undefined;\n  constructor(\n    errorCode: MicroserviceErrorCode = MicroserviceErrorCode.DEFAULT,\n  ) {\n    this.errorCode = errorCode;\n  }\n}\n\nexport class SuccessMicroserviceResponse implements MicroserviceResponse {\n  error: boolean = false;\n  errorCode: MicroserviceErrorCode = MicroserviceErrorCode.DEFAULT;\n  data: T;\n  constructor(data: T) {\n    this.data = data;\n  }\n}\nexport enum MicroserviceErrorCode {\n  DEFAULT = \"00x0000\",\n  DUPLICATE_EMAIL = \"01x0001\",\n  EMAIL_NOT_FOUND = \"01x0002\",\n  PASSWORD_IS_INCORRECT = \"01x0003\",\n  USER_NOT_FOUND = \"01x0004\",\n  INCORRECT_REFRESH_TOKEN = \"01x0005\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestController.html":{"url":"controllers/TestController.html","title":"controller - TestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gateway/test/test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        test\n                        \n                    \n                \n            \n            \n                \n                        \n                    test(res: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/gateway/test/test.controller.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from \"@nestjs/common\";\n\n@Controller(\"test\")\nexport class TestController {\n  @Get()\n  test(@Res() res: any) {\n    setTimeout(() => {\n      res.send(\"Hello world\");\n    }, 3000);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.type.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { AuditEntity } from '../base/base.type';\n\n@Schema()\nexport class User extends AuditEntity {\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  phoneNumber: string;\n\n  @Prop()\n  firstName: string;\n\n  @Prop()\n  lastName: string;\n\n  @Prop()\n  middleName: string;\n\n  @Prop()\n  refreshToken: string;\n}\n\nexport type UserDocument = HydratedDocument;\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/microservices/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                logInByEmailAndPassword\n                            \n                            \n                                    \n                                logInByRefreshToken\n                            \n                            \n                                    \n                                registerByEmailAndPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logInByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    logInByEmailAndPassword(payload: LogInByEmailAndPassword)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern(undefined.logInByEmailAndPassword)\n                \n            \n\n                    \n                        \n                            Defined in src/microservices/user/user.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LogInByEmailAndPassword\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logInByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    logInByRefreshToken(payload: LogInByRefreshToken)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern(undefined.logInByRefreshToken)\n                \n            \n\n                    \n                        \n                            Defined in src/microservices/user/user.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LogInByRefreshToken\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registerByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerByEmailAndPassword(payload: RegisterByEmailAndPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern(undefined.registerByEmailAndPassword)\n                \n            \n\n                    \n                        \n                            Defined in src/microservices/user/user.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            RegisterByEmailAndPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from \"@nestjs/common\";\nimport { MessagePattern, Payload } from \"@nestjs/microservices\";\nimport { microserviceConfig } from \"src/config/microservice.config\";\nimport { UserService } from \"../../modules/user/user.service\";\nimport {\n  LogInByEmailAndPassword,\n  LogInByRefreshToken,\n  RegisterByEmailAndPasswordDto,\n} from \"../../modules/auth/auth.type\";\n\n@Controller(\"user\")\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @MessagePattern(microserviceConfig.auth.patterns.registerByEmailAndPassword)\n  registerByEmailAndPassword(\n    @Payload() payload: RegisterByEmailAndPasswordDto,\n  ) {\n    return this.userService.registerByEmailAndPassword(\n      payload.email,\n      payload.password,\n      payload.firstName,\n      payload.lastName,\n    );\n  }\n\n  @MessagePattern(microserviceConfig.auth.patterns.logInByEmailAndPassword)\n  logInByEmailAndPassword(@Payload() payload: LogInByEmailAndPassword) {\n    return this.userService.findOneByEmailAndPassword(\n      payload.email,\n      payload.password,\n    );\n  }\n\n  @MessagePattern(microserviceConfig.auth.patterns.logInByRefreshToken)\n  logInByRefreshToken(@Payload() payload: LogInByRefreshToken) {\n    return this.userService.findOneByRefreshToken(payload.refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOneByEmailAndPassword\n                            \n                            \n                                    Async\n                                findOneByRefreshToken\n                            \n                            \n                                    Async\n                                registerByEmailAndPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, hashService: HashService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByRefreshToken(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registerByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerByEmailAndPassword(email: string, password: string, firstName: string, lastName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                firstName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                lastName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from './user.type';\nimport { Model } from 'mongoose';\nimport { HashService } from 'src/core/hash/hash.service';\nimport {\n  BadMicroserviceResponse,\n  MicroserviceErrorCode,\n  SuccessMicroserviceResponse,\n} from 'src/core/microservice/microservice.type';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(User.name, 'metadata')\n    private readonly userModel: Model,\n    private readonly hashService: HashService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async registerByEmailAndPassword(\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n  ) {\n    if ((await this.userModel.countDocuments({ email: email }).exec()) > 0) {\n      return new BadMicroserviceResponse(MicroserviceErrorCode.DUPLICATE_EMAIL);\n    }\n    let user = new this.userModel({\n      email: email,\n      username: email,\n      firstName: firstName,\n      lastName: lastName,\n      password: this.hashService.hash(password),\n    });\n    user = await user.save();\n    return new SuccessMicroserviceResponse(user.toJSON());\n  }\n\n  async findOneByEmailAndPassword(email: string, password: string) {\n    let user = await this.userModel.findOne({\n      email: email,\n    });\n    if (!user) {\n      return new BadMicroserviceResponse(MicroserviceErrorCode.EMAIL_NOT_FOUND);\n    }\n    if (!this.hashService.compare(password, user.password)) {\n      return new BadMicroserviceResponse(\n        MicroserviceErrorCode.PASSWORD_IS_INCORRECT,\n      );\n    }\n    const refreshToken = await this.jwtService.signAsync(\n      {\n        sub: user.email,\n      },\n      {\n        secret: this.configService.get('JWT_SECRET') as string,\n        expiresIn: this.configService.get(\n          'JWT_REFRESH_TOKEN_EXPIRES_IN',\n        ) as string,\n      },\n    );\n    user.refreshToken = refreshToken;\n    user = await user.save();\n    return new SuccessMicroserviceResponse({\n      ...user.toJSON(),\n      password: undefined, // ignore password\n    });\n  }\n\n  async findOneByRefreshToken(refreshToken: string) {\n    const user = await this.userModel.findOne({\n      refreshToken: refreshToken,\n    });\n    if (!user) {\n      return new BadMicroserviceResponse(MicroserviceErrorCode.USER_NOT_FOUND);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const payload = await this.jwtService.verifyAsync(refreshToken);\n    if (!payload) {\n      return new BadMicroserviceResponse(\n        MicroserviceErrorCode.INCORRECT_REFRESH_TOKEN,\n      );\n    }\n    return new SuccessMicroserviceResponse({\n      ...user.toJSON(),\n      password: undefined, // ignore return password\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/config/microservice.config.ts\n            \n            variable\n            microserviceConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/decorators/public.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/decorators/public.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/exceptions/BadRequestAlertException.ts\n            \n            class\n            BadRequestAlertException\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filter/global.filter.ts\n            \n            class\n            GlobalFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/gateway/gateway.controller.ts\n            \n            class\n            GatewayController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/guards/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/hash/hash.service.ts\n            \n            injectable\n            HashService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interceptors/exception/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/response/response.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/core/microservice/error.type.ts\n            \n            variable\n            ErrorMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/microservice/microservice.type.ts\n            \n            class\n            BadMicroserviceResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/microservice/microservice.type.ts\n            \n            class\n            SuccessMicroserviceResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/microservice/microservice.type.ts\n            \n            interface\n            MicroserviceResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/gateway/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/gateway/firestore/firestore.controller.ts\n            \n            controller\n            FirestoreController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gateway/storage/storage.controller.ts\n            \n            controller\n            StorageController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/gateway/test/test.controller.ts\n            \n            controller\n            TestController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/microservices/firestore/firestore.controller.ts\n            \n            controller\n            FirestoreController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/microservices/firestore/firestore.type.ts\n            \n            interface\n            CreateFirestoreRecord\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/microservices/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.type.ts\n            \n            interface\n            JWTPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.type.ts\n            \n            interface\n            LogInByEmailAndPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.type.ts\n            \n            interface\n            LogInByRefreshToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.type.ts\n            \n            interface\n            LogInResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.type.ts\n            \n            interface\n            RegisterByEmailAndPasswordDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.type.ts\n            \n            interface\n            RegisterResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/base/base.service.ts\n            \n            class\n            BaseService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/base/base.type.ts\n            \n            class\n            AuditEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/base/base.type.ts\n            \n            interface\n            ResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/firestore/firestore.service.ts\n            \n            injectable\n            FirestoreService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/firestore/firestore.type.ts\n            \n            class\n            DynamicSchema\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/firestore/firestore.type.ts\n            \n            class\n            Field\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/modules/firestore/firestore.type.ts\n            \n            variable\n            DynamicSchemaSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/firestore/firestore.type.ts\n            \n            type alias\n            DynamicSchemaDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/mongoose/mongoose.service.ts\n            \n            injectable\n            MongooseService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/project/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/project/project.type.ts\n            \n            class\n            Project\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/project/project.type.ts\n            \n            variable\n            projectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/project/project.type.ts\n            \n            type alias\n            ProjectDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/user.type.ts\n            \n            class\n            User\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/modules/user/user.type.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/user/user.type.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/microservices : ^11.0.11\n        \n            @nestjs/mongoose : ^11.0.1\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            bcrypt : ^5.1.1\n        \n            ioredis : ^5.6.0\n        \n            mongoose : ^8.12.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MicroserviceErrorCode   (src/.../microservice.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/microservice/microservice.type.ts\n    \n        \n            \n                \n                    \n                        \n                        MicroserviceErrorCode\n                    \n                \n                        \n                            \n                                 DEFAULT\n                            \n                        \n                        \n                            \n                                Value : 00x0000\n                            \n                        \n                        \n                            \n                                 DUPLICATE_EMAIL\n                            \n                        \n                        \n                            \n                                Value : 01x0001\n                            \n                        \n                        \n                            \n                                 EMAIL_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : 01x0002\n                            \n                        \n                        \n                            \n                                 PASSWORD_IS_INCORRECT\n                            \n                        \n                        \n                            \n                                Value : 01x0003\n                            \n                        \n                        \n                            \n                                 USER_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : 01x0004\n                            \n                        \n                        \n                            \n                                 INCORRECT_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                Value : 01x0005\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# debug mode\n$ npm run start:debug\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covAPI Handle Flow\nDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GatewayModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MicroservicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModulesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ModulesModule\n\n\n\ncluster_ModulesModule_exports\n\n\n\ncluster_ModulesModule_providers\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nGatewayModule\n\nGatewayModule\n\nAppModule -->\n\nGatewayModule->AppModule\n\n\n\n\n\nMicroservicesModule\n\nMicroservicesModule\n\nAppModule -->\n\nMicroservicesModule->AppModule\n\n\n\n\n\nModulesModule\n\nModulesModule\n\nGatewayModule -->\n\nModulesModule->GatewayModule\n\n\n\nMicroservicesModule -->\n\nModulesModule->MicroservicesModule\n\n\n\nAppModule -->\n\nModulesModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nModulesModule->AuthService \n\n\n\n\n\nFirestoreService \n\nFirestoreService \n\nFirestoreService  -->\n\nModulesModule->FirestoreService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nModulesModule->UserService \n\n\n\n\n\nHashService\n\nHashService\n\nCoreModule -->\n\nHashService->CoreModule\n\n\n\nModulesModule -->\n\nHashService->ModulesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nModulesModule -->\n\nAuthService->ModulesModule\n\n\n\n\n\nFirestoreService\n\nFirestoreService\n\nModulesModule -->\n\nFirestoreService->ModulesModule\n\n\n\n\n\nMongooseService\n\nMongooseService\n\nModulesModule -->\n\nMongooseService->ModulesModule\n\n\n\n\n\nProjectService\n\nProjectService\n\nModulesModule -->\n\nProjectService->ModulesModule\n\n\n\n\n\nUserService\n\nUserService\n\nModulesModule -->\n\nUserService->ModulesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : vanminh.vu\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DynamicSchemaDocument   (src/.../firestore.type.ts)\n                        \n                        \n                            ProjectDocument   (src/.../project.type.ts)\n                        \n                        \n                            UserDocument   (src/.../user.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/firestore/firestore.type.ts\n    \n    \n        \n            \n                \n                    \n                    DynamicSchemaDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/project/project.type.ts\n    \n    \n        \n            \n                \n                    \n                    ProjectDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/user/user.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DynamicSchemaSchema   (src/.../firestore.type.ts)\n                        \n                        \n                            ErrorMessage   (src/.../error.type.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.ts)\n                        \n                        \n                            microserviceConfig   (src/.../microservice.config.ts)\n                        \n                        \n                            projectSchema   (src/.../project.type.ts)\n                        \n                        \n                            Public   (src/.../public.ts)\n                        \n                        \n                            UserSchema   (src/.../user.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/firestore/firestore.type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DynamicSchemaSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(DynamicSchema)\n                    \n                \n\n\n        \n    \n\n    src/core/microservice/error.type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ErrorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n\n        \n    \n\n    src/core/decorators/public.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/config/microservice.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        microserviceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  auth: {\n    name: \"auth\",\n    patterns: {\n      registerByEmailAndPassword: \"v1.auth.register-by-email-and-password\",\n      logInByEmailAndPassword: \"v1.auth.log-in-by-email-password\",\n      logInByRefreshToken: \"v1.auth.log-in-by-refresh-token\",\n    },\n  },\n  firestore: {\n    name: \"firestore\",\n    patterns: {\n      createRecord: \"v1.firestore.createRecord\",\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/project/project.type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        projectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Project)\n                    \n                \n\n\n        \n    \n\n    src/modules/user/user.type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
